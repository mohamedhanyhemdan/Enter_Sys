
Enter_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002b64  00002bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000f6  008000f6  00002c8e  2**0
                  ALLOC
  3 .stab         00002fa0  00000000  00000000  00002c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000150e  00000000  00000000  00005c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000713e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000727e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009037  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000acd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b88b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <main>
      8a:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ec       	ldi	r26, 0xC8	; 200
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ec       	ldi	r24, 0xC8	; 200
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <mUART_Init>:

#include "../../../Inc/MCAL/NTI_Atmega32Reg.h"
#include "../../../Inc/Common/Macros.h"
#include "../../../Inc/MCAL/Uart/Uart_Interface.h"
void mUART_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
    uint8_t UCSRC_Temp = 0 ;
     b50:	19 82       	std	Y+1, r1	; 0x01
    // Mode (Synch Or Asynch)
        // this Driver Support Asynch Only
        // UMSEL_Bit in  UCSRC must be zero
        ClearBit(UCSRC_Temp,UMSEL_Bit);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	8f 7b       	andi	r24, 0xBF	; 191
     b56:	89 83       	std	Y+1, r24	; 0x01
        //Disable ->  UPM1_Bit & UPM0_Bit in  UCSRC Must be 0 0
        //Even    ->   UPM1_Bit in UCSRC must be   1
        //             UPM1_Bit in UCSRC must be   0
        if(ParityMode==Disabled)
        {
            ClearBit(UCSRC_Temp,UPM0_Bit);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7e       	andi	r24, 0xEF	; 239
     b5c:	89 83       	std	Y+1, r24	; 0x01
            ClearBit(UCSRC_Temp,UPM1_Bit);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7d       	andi	r24, 0xDF	; 223
     b62:	89 83       	std	Y+1, r24	; 0x01
    // Stop Bit
        //1 Stop USBS_Bit in UCSRC -> 0
        //2 Stop USBS_Bit in UCSRC -> 1
        if(StopBitSize==Stop1Bit)
        {
            ClearBit(UCSRC_Temp,USBS_Bit);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	87 7f       	andi	r24, 0xF7	; 247
     b68:	89 83       	std	Y+1, r24	; 0x01
            // UCSZ0_Bit   in   UCSRC = 1
            // UCSZ1_Bit   in   UCSRC = 1
            // UCSZ2_Bit   in   UCSRB = 1
        if(CharacterSize==Size8Bit)
        {
            SetBit(UCSRC_Temp,UCSZ0_Bit);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	82 60       	ori	r24, 0x02	; 2
     b6e:	89 83       	std	Y+1, r24	; 0x01
            SetBit(UCSRC_Temp,UCSZ1_Bit);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	89 83       	std	Y+1, r24	; 0x01
            ClearBit(UCSRB_Reg,UCSZ2_Bit);
     b76:	aa e2       	ldi	r26, 0x2A	; 42
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ea e2       	ldi	r30, 0x2A	; 42
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8b 7f       	andi	r24, 0xFB	; 251
     b82:	8c 93       	st	X, r24
            SetBit(UCSRC_Temp,UCSZ1_Bit);
            SetBit(UCSRB_Reg,UCSZ2_Bit);
        }
    // Disable Interrupt
        // 1- Disable For RXCIE - > 0 in UCSRB
            ClearBit(UCSRB_Reg,RXCIE_Bit);
     b84:	aa e2       	ldi	r26, 0x2A	; 42
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ea e2       	ldi	r30, 0x2A	; 42
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	8c 93       	st	X, r24
        // 2- Disable For TXCIE - > 0
            ClearBit(UCSRB_Reg,TXCIE_Bit);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8f 7b       	andi	r24, 0xBF	; 191
     b9e:	8c 93       	st	X, r24
        // 3- Disable For UDRIE - > 0
            ClearBit(UCSRB_Reg,UDRIE_Bit);
     ba0:	aa e2       	ldi	r26, 0x2A	; 42
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ea e2       	ldi	r30, 0x2A	; 42
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8f 7d       	andi	r24, 0xDF	; 223
     bac:	8c 93       	st	X, r24
    // Speed
        // 1- NormalSpeed -> U2X_Bit in UCSRA = 0
        // 2- DoubleSpeed -> U2X_Bit  in UCSRA = 1
        if(UARTSpeed==NormalSpeed)
        {
            ClearBit(UCSRA_Reg,U2X_Bit);
     bae:	ab e2       	ldi	r26, 0x2B	; 43
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	eb e2       	ldi	r30, 0x2B	; 43
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8d 7f       	andi	r24, 0xFD	; 253
     bba:	8c 93       	st	X, r24
        }
    // Baud Rate
        // UBRRL & UBRRH
        if(UBRR_Value<=255)
        {
            UBRRL_Reg=UBRR_Value;
     bbc:	e9 e2       	ldi	r30, 0x29	; 41
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	84 e6       	ldi	r24, 0x64	; 100
     bc2:	80 83       	st	Z, r24
        //1- Tx Enable Only
        //2- RX Enable Only
        //Both Enable
        if(UartCircuitEnabled==TxEnable)
        {
            SetBit(UCSRB_Reg,TXEN_Bit);
     bc4:	aa e2       	ldi	r26, 0x2A	; 42
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	ea e2       	ldi	r30, 0x2A	; 42
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	88 60       	ori	r24, 0x08	; 8
     bd0:	8c 93       	st	X, r24
            ClearBit(UCSRB_Reg,RXEN_Bit);
     bd2:	aa e2       	ldi	r26, 0x2A	; 42
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e2       	ldi	r30, 0x2A	; 42
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8f 7e       	andi	r24, 0xEF	; 239
     bde:	8c 93       	st	X, r24
        {
            SetBit(UCSRB_Reg,TXEN_Bit);
            SetBit(UCSRB_Reg,RXEN_Bit);
        }

        UCSRC_Reg=UCSRC_Temp;
     be0:	e0 e4       	ldi	r30, 0x40	; 64
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	80 83       	st	Z, r24
}
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <mUART_Send>:

void mUART_Send(uint16_t Data)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <mUART_Send+0x6>
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
    //check DataSize   // Update txBuffer
    if(CharacterSize==Size8Bit)
    {
        UDR_Reg=(uint8_t)Data; // tx Buffer
     bfe:	ec e2       	ldi	r30, 0x2C	; 44
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	80 83       	st	Z, r24
        {
            ClearBit(UCSRB_Reg,TXB8_Bit);
        }
    }
    // wait until Flag set
    while(GetBit(UCSRA_Reg,UDRE_Bit)==0);
     c06:	eb e2       	ldi	r30, 0x2B	; 43
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	82 95       	swap	r24
     c0e:	86 95       	lsr	r24
     c10:	87 70       	andi	r24, 0x07	; 7
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	a1 f3       	breq	.-24     	; 0xc06 <mUART_Send+0x16>
    // Clear flag
    SetBit(UCSRA_Reg,UDRE_Bit);
     c1e:	ab e2       	ldi	r26, 0x2B	; 43
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	eb e2       	ldi	r30, 0x2B	; 43
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	80 62       	ori	r24, 0x20	; 32
     c2a:	8c 93       	st	X, r24
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <mUART_Recivie>:


uint16_t mUART_Recivie()
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <mUART_Recivie+0x6>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
    uint16_t RxData = 0 ;
     c40:	1a 82       	std	Y+2, r1	; 0x02
     c42:	19 82       	std	Y+1, r1	; 0x01
    while(GetBit(UCSRA_Reg,RXC_Bit)==0);
     c44:	eb e2       	ldi	r30, 0x2B	; 43
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	88 23       	and	r24, r24
     c4c:	dc f7       	brge	.-10     	; 0xc44 <mUART_Recivie+0xe>
    SetBit(UCSRA_Reg,RXC_Bit);
     c4e:	ab e2       	ldi	r26, 0x2B	; 43
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	eb e2       	ldi	r30, 0x2B	; 43
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	8c 93       	st	X, r24
    if(CharacterSize==Size8Bit)
    {
        RxData=UDR_Reg;
     c5c:	ec e2       	ldi	r30, 0x2C	; 44
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
            ClearBit(RxData,8);
        }
    }


    return RxData;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <mSPI_SlaveInit>:



#elif SPI_SelectMode==SlaveMode
void mSPI_SlaveInit()
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
    ClearBit(SPCR_Reg, SPIE_Bit);
     c80:	ad e2       	ldi	r26, 0x2D	; 45
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	ed e2       	ldi	r30, 0x2D	; 45
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8f 77       	andi	r24, 0x7F	; 127
     c8c:	8c 93       	st	X, r24
    ClearBit(SPCR_Reg, MSTR_Bit);
     c8e:	ad e2       	ldi	r26, 0x2D	; 45
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ed e2       	ldi	r30, 0x2D	; 45
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8f 7e       	andi	r24, 0xEF	; 239
     c9a:	8c 93       	st	X, r24
    {
        ClearBit(SPCR_Reg, DORD_Bit);
    }
    else if (SPI_DataOrder == SendLSB_First)
    {
        SetBit(SPCR_Reg, DORD_Bit);
     c9c:	ad e2       	ldi	r26, 0x2D	; 45
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	ed e2       	ldi	r30, 0x2D	; 45
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	80 62       	ori	r24, 0x20	; 32
     ca8:	8c 93       	st	X, r24
    }
    //cpl
    if (SPI_ClkPOL == IdelLow)
    {
        ClearBit(SPCR_Reg, CPOL_Bit);
     caa:	ad e2       	ldi	r26, 0x2D	; 45
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ed e2       	ldi	r30, 0x2D	; 45
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	8c 93       	st	X, r24
    {
        ClearBit(SPCR_Reg, CPHA_Bit);
    }
    else if (SPI_ClkPHA == MasterTxFirst)
    {
        SetBit(SPCR_Reg, CPHA_Bit);
     cb8:	ad e2       	ldi	r26, 0x2D	; 45
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ed e2       	ldi	r30, 0x2D	; 45
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	84 60       	ori	r24, 0x04	; 4
     cc4:	8c 93       	st	X, r24
    }
    DDRB_Reg |= (1 << 6);
     cc6:	a7 e3       	ldi	r26, 0x37	; 55
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 64       	ori	r24, 0x40	; 64
     cd2:	8c 93       	st	X, r24

    SetBit(SPCR_Reg, SPE_Bit);
     cd4:	ad e2       	ldi	r26, 0x2D	; 45
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ed e2       	ldi	r30, 0x2D	; 45
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 64       	ori	r24, 0x40	; 64
     ce0:	8c 93       	st	X, r24
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <mSPI_SlaveTrnsiever>:


uint8_t mSPI_SlaveTrnsiever(uint8_t Data)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	0f 92       	push	r0
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	89 83       	std	Y+1, r24	; 0x01
	SPDR_Reg = Data;
     cf4:	ef e2       	ldi	r30, 0x2F	; 47
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	80 83       	st	Z, r24
	while (GetBit(SPSR_Reg, SPIF_Bit) == 0);
     cfc:	ee e2       	ldi	r30, 0x2E	; 46
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	88 23       	and	r24, r24
     d04:	dc f7       	brge	.-10     	; 0xcfc <mSPI_SlaveTrnsiever+0x14>
	return SPDR_Reg;
     d06:	ef e2       	ldi	r30, 0x2F	; 47
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z

}
     d0c:	0f 90       	pop	r0
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <mGIE_Enable>:
#include "../../../Inc/Common/Macros.h"



void mGIE_Enable()
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_Reg,GIE_Bit);
     d1c:	af e5       	ldi	r26, 0x5F	; 95
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ef e5       	ldi	r30, 0x5F	; 95
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	8c 93       	st	X, r24
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <mGIE_Disable>:
void mGIE_Disable()
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	ClearBit(SREG_Reg,GIE_Bit);
     d38:	af e5       	ldi	r26, 0x5F	; 95
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ef e5       	ldi	r30, 0x5F	; 95
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8f 77       	andi	r24, 0x7F	; 127
     d44:	8c 93       	st	X, r24
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <mEXTI0_Enable>:
#include "../../../Inc/MCAL/EXTI/EXTI_Interface.h"
#include "../../../Inc/Common/Macros.h"


void mEXTI0_Enable(uint8_t SensControl)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <mEXTI0_Enable+0x6>
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	89 83       	std	Y+1, r24	; 0x01
    // Clear ISC00 and ISC01 bits (MCUCR bits 0 and 1)
    MCUCR_Reg &= ~((1 << EXTI_ISC00) | (1 << EXTI_ISC01));
     d5a:	a5 e5       	ldi	r26, 0x55	; 85
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e5 e5       	ldi	r30, 0x55	; 85
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8c 7f       	andi	r24, 0xFC	; 252
     d66:	8c 93       	st	X, r24

    // Set ISC00 and ISC01 according to SensControl
    switch (SensControl) {
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3b 83       	std	Y+3, r19	; 0x03
     d70:	2a 83       	std	Y+2, r18	; 0x02
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	81 f0       	breq	.+32     	; 0xd9c <mEXTI0_Enable+0x50>
     d7c:	2a 81       	ldd	r18, Y+2	; 0x02
     d7e:	3b 81       	ldd	r19, Y+3	; 0x03
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	14 f1       	brlt	.+68     	; 0xdca <mEXTI0_Enable+0x7e>
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	91 05       	cpc	r25, r1
     d8e:	71 f0       	breq	.+28     	; 0xdac <mEXTI0_Enable+0x60>
     d90:	2a 81       	ldd	r18, Y+2	; 0x02
     d92:	3b 81       	ldd	r19, Y+3	; 0x03
     d94:	23 30       	cpi	r18, 0x03	; 3
     d96:	31 05       	cpc	r19, r1
     d98:	89 f0       	breq	.+34     	; 0xdbc <mEXTI0_Enable+0x70>
     d9a:	17 c0       	rjmp	.+46     	; 0xdca <mEXTI0_Enable+0x7e>
            // ISC01 = 0, ISC00 = 0
            break;

        case EXTI_AnyChange:
            // ISC01 = 0, ISC00 = 1
        	MCUCR_Reg |= (1 << EXTI_ISC00);
     d9c:	a5 e5       	ldi	r26, 0x55	; 85
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e5 e5       	ldi	r30, 0x55	; 85
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	81 60       	ori	r24, 0x01	; 1
     da8:	8c 93       	st	X, r24
     daa:	0f c0       	rjmp	.+30     	; 0xdca <mEXTI0_Enable+0x7e>
            break;

        case EXTI_Falling:
            // ISC01 = 1, ISC00 = 0
        	MCUCR_Reg |= (1 << EXTI_ISC01);
     dac:	a5 e5       	ldi	r26, 0x55	; 85
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e5 e5       	ldi	r30, 0x55	; 85
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	82 60       	ori	r24, 0x02	; 2
     db8:	8c 93       	st	X, r24
     dba:	07 c0       	rjmp	.+14     	; 0xdca <mEXTI0_Enable+0x7e>
            break;

        case EXTI_Rising:
            // ISC01 = 1, ISC00 = 1
        	MCUCR_Reg |= (1 << EXTI_ISC00) | (1 << EXTI_ISC01);
     dbc:	a5 e5       	ldi	r26, 0x55	; 85
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e5 e5       	ldi	r30, 0x55	; 85
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	83 60       	ori	r24, 0x03	; 3
     dc8:	8c 93       	st	X, r24
            // Default to low level if invalid value
            break;
    }

    // Enable INT0 (bit 6 in GICR)
    GICR_Reg |= (1 << EXTI_INT0);
     dca:	ab e5       	ldi	r26, 0x5B	; 91
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e5       	ldi	r30, 0x5B	; 91
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 64       	ori	r24, 0x40	; 64
     dd6:	8c 93       	st	X, r24
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <mEXTI1_Enable>:

void mEXTI1_Enable(uint8_t SensControl)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01

}
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <mEXTI2_Enable>:

void mEXTI2_Enable(uint8_t SensControl)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
//	 * 				Bit 6 in MCUCSR Register must be 0
//	 * 			if SensControl == 3
//	 * 				Bit 6 in MCUCSR Register must be 1
//	 * 		2- Enable the SIE For EXTI2
//	 * 			Bit 5 in GICR Resister  must be One
	if(SensControl==EXTI_Falling)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	41 f4       	brne	.+16     	; 0xe1a <mEXTI2_Enable+0x22>
	{
		ClearBit(MCUCSR_Reg,EXTI_ISC2);
     e0a:	a4 e5       	ldi	r26, 0x54	; 84
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e4 e5       	ldi	r30, 0x54	; 84
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	8c 93       	st	X, r24
     e18:	0a c0       	rjmp	.+20     	; 0xe2e <mEXTI2_Enable+0x36>
	}
	else if (SensControl==EXTI_Rising)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	39 f4       	brne	.+14     	; 0xe2e <mEXTI2_Enable+0x36>
	{
		SetBit(MCUCSR_Reg,EXTI_ISC2);
     e20:	a4 e5       	ldi	r26, 0x54	; 84
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e4 e5       	ldi	r30, 0x54	; 84
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 64       	ori	r24, 0x40	; 64
     e2c:	8c 93       	st	X, r24
	}
	else
	{
		// Not Vaild Options
	}
	SetBit(GICR_Reg,EXTI_INT2);
     e2e:	ab e5       	ldi	r26, 0x5B	; 91
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	eb e5       	ldi	r30, 0x5B	; 91
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	8c 93       	st	X, r24
}
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <mDIO_ChangeDirectionForPin>:
#include "../../../INC/Common/Macros.h"

#include "../../../Inc/MCAL/NTI_Atmega32Reg.h"

void mDIO_ChangeDirectionForPin(uint8_t GroupName , uint8_t PinNumber , uint8_t DirectionState)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	27 97       	sbiw	r28, 0x07	; 7
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	6a 83       	std	Y+2, r22	; 0x02
     e5c:	4b 83       	std	Y+3, r20	; 0x03
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	88 30       	cpi	r24, 0x08	; 8
     e62:	08 f0       	brcs	.+2      	; 0xe66 <mDIO_ChangeDirectionForPin+0x22>
     e64:	ec c0       	rjmp	.+472    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
	{
		if (DirectionState==DIO_Output)
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <mDIO_ChangeDirectionForPin+0x2a>
     e6c:	70 c0       	rjmp	.+224    	; 0xf4e <mDIO_ChangeDirectionForPin+0x10a>
		{
			switch(GroupName)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	3f 83       	std	Y+7, r19	; 0x07
     e76:	2e 83       	std	Y+6, r18	; 0x06
     e78:	8e 81       	ldd	r24, Y+6	; 0x06
     e7a:	9f 81       	ldd	r25, Y+7	; 0x07
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	51 f1       	breq	.+84     	; 0xed6 <mDIO_ChangeDirectionForPin+0x92>
     e82:	2e 81       	ldd	r18, Y+6	; 0x06
     e84:	3f 81       	ldd	r19, Y+7	; 0x07
     e86:	23 30       	cpi	r18, 0x03	; 3
     e88:	31 05       	cpc	r19, r1
     e8a:	34 f4       	brge	.+12     	; 0xe98 <mDIO_ChangeDirectionForPin+0x54>
     e8c:	8e 81       	ldd	r24, Y+6	; 0x06
     e8e:	9f 81       	ldd	r25, Y+7	; 0x07
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 05       	cpc	r25, r1
     e94:	61 f0       	breq	.+24     	; 0xeae <mDIO_ChangeDirectionForPin+0x6a>
     e96:	d3 c0       	rjmp	.+422    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
     e98:	2e 81       	ldd	r18, Y+6	; 0x06
     e9a:	3f 81       	ldd	r19, Y+7	; 0x07
     e9c:	23 30       	cpi	r18, 0x03	; 3
     e9e:	31 05       	cpc	r19, r1
     ea0:	71 f1       	breq	.+92     	; 0xefe <mDIO_ChangeDirectionForPin+0xba>
     ea2:	8e 81       	ldd	r24, Y+6	; 0x06
     ea4:	9f 81       	ldd	r25, Y+7	; 0x07
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	91 05       	cpc	r25, r1
     eaa:	e9 f1       	breq	.+122    	; 0xf26 <mDIO_ChangeDirectionForPin+0xe2>
     eac:	c8 c0       	rjmp	.+400    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			{
			case GroupA: SetBit(DDRA_Reg,PinNumber);break;
     eae:	aa e3       	ldi	r26, 0x3A	; 58
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <mDIO_ChangeDirectionForPin+0x88>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <mDIO_ChangeDirectionForPin+0x84>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	b4 c0       	rjmp	.+360    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupB: SetBit(DDRB_Reg,PinNumber);break;
     ed6:	a7 e3       	ldi	r26, 0x37	; 55
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e7 e3       	ldi	r30, 0x37	; 55
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <mDIO_ChangeDirectionForPin+0xb0>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <mDIO_ChangeDirectionForPin+0xac>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	a0 c0       	rjmp	.+320    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupC: SetBit(DDRC_Reg,PinNumber);break;
     efe:	a4 e3       	ldi	r26, 0x34	; 52
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e4 e3       	ldi	r30, 0x34	; 52
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <mDIO_ChangeDirectionForPin+0xd8>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <mDIO_ChangeDirectionForPin+0xd4>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	8c c0       	rjmp	.+280    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupD: SetBit(DDRD_Reg,PinNumber);break;
     f26:	a1 e3       	ldi	r26, 0x31	; 49
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e1 e3       	ldi	r30, 0x31	; 49
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <mDIO_ChangeDirectionForPin+0x100>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <mDIO_ChangeDirectionForPin+0xfc>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	78 c0       	rjmp	.+240    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			default :  // GroupName Outof Rang
				break;
			}
		}
		else if (DirectionState==DIO_Input)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 23       	and	r24, r24
     f52:	09 f0       	breq	.+2      	; 0xf56 <mDIO_ChangeDirectionForPin+0x112>
     f54:	74 c0       	rjmp	.+232    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
		{
			switch(GroupName)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3d 83       	std	Y+5, r19	; 0x05
     f5e:	2c 83       	std	Y+4, r18	; 0x04
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	91 05       	cpc	r25, r1
     f68:	61 f1       	breq	.+88     	; 0xfc2 <mDIO_ChangeDirectionForPin+0x17e>
     f6a:	2c 81       	ldd	r18, Y+4	; 0x04
     f6c:	3d 81       	ldd	r19, Y+5	; 0x05
     f6e:	23 30       	cpi	r18, 0x03	; 3
     f70:	31 05       	cpc	r19, r1
     f72:	34 f4       	brge	.+12     	; 0xf80 <mDIO_ChangeDirectionForPin+0x13c>
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	69 f0       	breq	.+26     	; 0xf98 <mDIO_ChangeDirectionForPin+0x154>
     f7e:	5f c0       	rjmp	.+190    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
     f80:	2c 81       	ldd	r18, Y+4	; 0x04
     f82:	3d 81       	ldd	r19, Y+5	; 0x05
     f84:	23 30       	cpi	r18, 0x03	; 3
     f86:	31 05       	cpc	r19, r1
     f88:	89 f1       	breq	.+98     	; 0xfec <mDIO_ChangeDirectionForPin+0x1a8>
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	91 05       	cpc	r25, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <mDIO_ChangeDirectionForPin+0x152>
     f94:	40 c0       	rjmp	.+128    	; 0x1016 <mDIO_ChangeDirectionForPin+0x1d2>
     f96:	53 c0       	rjmp	.+166    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			{
			case GroupA: ClearBit(DDRA_Reg ,PinNumber);break;
     f98:	aa e3       	ldi	r26, 0x3A	; 58
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <mDIO_ChangeDirectionForPin+0x172>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <mDIO_ChangeDirectionForPin+0x16e>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	3e c0       	rjmp	.+124    	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupB: ClearBit(DDRB_Reg,PinNumber);break;
     fc2:	a7 e3       	ldi	r26, 0x37	; 55
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e7 e3       	ldi	r30, 0x37	; 55
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <mDIO_ChangeDirectionForPin+0x19c>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <mDIO_ChangeDirectionForPin+0x198>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	29 c0       	rjmp	.+82     	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupC: ClearBit(DDRC_Reg,PinNumber);break;
     fec:	a4 e3       	ldi	r26, 0x34	; 52
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <mDIO_ChangeDirectionForPin+0x1c6>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <mDIO_ChangeDirectionForPin+0x1c2>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	14 c0       	rjmp	.+40     	; 0x103e <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupD: ClearBit(DDRD_Reg,PinNumber);break;
    1016:	a1 e3       	ldi	r26, 0x31	; 49
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e1 e3       	ldi	r30, 0x31	; 49
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <mDIO_ChangeDirectionForPin+0x1f0>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <mDIO_ChangeDirectionForPin+0x1ec>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
	else
	{
		// Pin Number Outof Range
	}

}
    103e:	27 96       	adiw	r28, 0x07	; 7
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <mDIO_WriteValueForPin>:
void mDIO_WriteValueForPin(uint8_t GroupName ,  uint8_t PinNumber , uint8_t OutputType)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	27 97       	sbiw	r28, 0x07	; 7
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03

	if(PinNumber>= Pin0 && PinNumber <=Pin7)
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	08 f0       	brcs	.+2      	; 0x1072 <mDIO_WriteValueForPin+0x22>
    1070:	ec c0       	rjmp	.+472    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
	{
		if (OutputType==DIO_Output)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	09 f0       	breq	.+2      	; 0x107a <mDIO_WriteValueForPin+0x2a>
    1078:	70 c0       	rjmp	.+224    	; 0x115a <mDIO_WriteValueForPin+0x10a>
		{
			switch(GroupName)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3f 83       	std	Y+7, r19	; 0x07
    1082:	2e 83       	std	Y+6, r18	; 0x06
    1084:	8e 81       	ldd	r24, Y+6	; 0x06
    1086:	9f 81       	ldd	r25, Y+7	; 0x07
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	91 05       	cpc	r25, r1
    108c:	51 f1       	breq	.+84     	; 0x10e2 <mDIO_WriteValueForPin+0x92>
    108e:	2e 81       	ldd	r18, Y+6	; 0x06
    1090:	3f 81       	ldd	r19, Y+7	; 0x07
    1092:	23 30       	cpi	r18, 0x03	; 3
    1094:	31 05       	cpc	r19, r1
    1096:	34 f4       	brge	.+12     	; 0x10a4 <mDIO_WriteValueForPin+0x54>
    1098:	8e 81       	ldd	r24, Y+6	; 0x06
    109a:	9f 81       	ldd	r25, Y+7	; 0x07
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	61 f0       	breq	.+24     	; 0x10ba <mDIO_WriteValueForPin+0x6a>
    10a2:	d3 c0       	rjmp	.+422    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
    10a4:	2e 81       	ldd	r18, Y+6	; 0x06
    10a6:	3f 81       	ldd	r19, Y+7	; 0x07
    10a8:	23 30       	cpi	r18, 0x03	; 3
    10aa:	31 05       	cpc	r19, r1
    10ac:	71 f1       	breq	.+92     	; 0x110a <mDIO_WriteValueForPin+0xba>
    10ae:	8e 81       	ldd	r24, Y+6	; 0x06
    10b0:	9f 81       	ldd	r25, Y+7	; 0x07
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	91 05       	cpc	r25, r1
    10b6:	e9 f1       	breq	.+122    	; 0x1132 <mDIO_WriteValueForPin+0xe2>
    10b8:	c8 c0       	rjmp	.+400    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			{
			case GroupA: SetBit(PORTA_Reg,PinNumber);break;
    10ba:	ab e3       	ldi	r26, 0x3B	; 59
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	eb e3       	ldi	r30, 0x3B	; 59
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <mDIO_WriteValueForPin+0x88>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <mDIO_WriteValueForPin+0x84>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	b4 c0       	rjmp	.+360    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			case GroupB: SetBit(PORTB_Reg,PinNumber);break;
    10e2:	a8 e3       	ldi	r26, 0x38	; 56
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e8 e3       	ldi	r30, 0x38	; 56
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <mDIO_WriteValueForPin+0xb0>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <mDIO_WriteValueForPin+0xac>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	a0 c0       	rjmp	.+320    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			case GroupC: SetBit(PORTC_Reg,PinNumber);break;
    110a:	a5 e3       	ldi	r26, 0x35	; 53
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e3       	ldi	r30, 0x35	; 53
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <mDIO_WriteValueForPin+0xd8>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <mDIO_WriteValueForPin+0xd4>
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	8c c0       	rjmp	.+280    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			case GroupD: SetBit(PORTD_Reg,PinNumber);break;
    1132:	a2 e3       	ldi	r26, 0x32	; 50
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e2 e3       	ldi	r30, 0x32	; 50
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <mDIO_WriteValueForPin+0x100>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <mDIO_WriteValueForPin+0xfc>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	78 c0       	rjmp	.+240    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			default :  // GroupName Outof Rang
				break;
			}
		}
		else if (OutputType==DIO_Input)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <mDIO_WriteValueForPin+0x112>
    1160:	74 c0       	rjmp	.+232    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
		{
			switch(GroupName)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3d 83       	std	Y+5, r19	; 0x05
    116a:	2c 83       	std	Y+4, r18	; 0x04
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	61 f1       	breq	.+88     	; 0x11ce <mDIO_WriteValueForPin+0x17e>
    1176:	2c 81       	ldd	r18, Y+4	; 0x04
    1178:	3d 81       	ldd	r19, Y+5	; 0x05
    117a:	23 30       	cpi	r18, 0x03	; 3
    117c:	31 05       	cpc	r19, r1
    117e:	34 f4       	brge	.+12     	; 0x118c <mDIO_WriteValueForPin+0x13c>
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	69 f0       	breq	.+26     	; 0x11a4 <mDIO_WriteValueForPin+0x154>
    118a:	5f c0       	rjmp	.+190    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
    118c:	2c 81       	ldd	r18, Y+4	; 0x04
    118e:	3d 81       	ldd	r19, Y+5	; 0x05
    1190:	23 30       	cpi	r18, 0x03	; 3
    1192:	31 05       	cpc	r19, r1
    1194:	89 f1       	breq	.+98     	; 0x11f8 <mDIO_WriteValueForPin+0x1a8>
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <mDIO_WriteValueForPin+0x152>
    11a0:	40 c0       	rjmp	.+128    	; 0x1222 <mDIO_WriteValueForPin+0x1d2>
    11a2:	53 c0       	rjmp	.+166    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			{
			case GroupA: ClearBit(PORTA_Reg ,PinNumber);break;
    11a4:	ab e3       	ldi	r26, 0x3B	; 59
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	eb e3       	ldi	r30, 0x3B	; 59
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <mDIO_WriteValueForPin+0x172>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <mDIO_WriteValueForPin+0x16e>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	3e c0       	rjmp	.+124    	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			case GroupB: ClearBit(PORTB_Reg,PinNumber);break;
    11ce:	a8 e3       	ldi	r26, 0x38	; 56
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e8 e3       	ldi	r30, 0x38	; 56
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <mDIO_WriteValueForPin+0x19c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <mDIO_WriteValueForPin+0x198>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	29 c0       	rjmp	.+82     	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			case GroupC: ClearBit(PORTC_Reg,PinNumber);break;
    11f8:	a5 e3       	ldi	r26, 0x35	; 53
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e5 e3       	ldi	r30, 0x35	; 53
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <mDIO_WriteValueForPin+0x1c6>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <mDIO_WriteValueForPin+0x1c2>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	14 c0       	rjmp	.+40     	; 0x124a <mDIO_WriteValueForPin+0x1fa>
			case GroupD: ClearBit(PORTD_Reg,PinNumber);break;
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <mDIO_WriteValueForPin+0x1f0>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <mDIO_WriteValueForPin+0x1ec>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
	}
	else
	{
		// Pin Number Outof Range
	}
}
    124a:	27 96       	adiw	r28, 0x07	; 7
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <mDIO_ReadValueFromPin>:
uint8_t mDIO_ReadValueFromPin(uint8_t  GroupName, uint8_t PinNumber)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <mDIO_ReadValueFromPin+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <mDIO_ReadValueFromPin+0x8>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t InputValue ;
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	08 f0       	brcs	.+2      	; 0x1276 <mDIO_ReadValueFromPin+0x1a>
    1274:	67 c0       	rjmp	.+206    	; 0x1344 <mDIO_ReadValueFromPin+0xe8>
	{
		switch(GroupName)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3d 83       	std	Y+5, r19	; 0x05
    127e:	2c 83       	std	Y+4, r18	; 0x04
    1280:	4c 81       	ldd	r20, Y+4	; 0x04
    1282:	5d 81       	ldd	r21, Y+5	; 0x05
    1284:	42 30       	cpi	r20, 0x02	; 2
    1286:	51 05       	cpc	r21, r1
    1288:	41 f1       	breq	.+80     	; 0x12da <mDIO_ReadValueFromPin+0x7e>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	91 05       	cpc	r25, r1
    1292:	34 f4       	brge	.+12     	; 0x12a0 <mDIO_ReadValueFromPin+0x44>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	21 30       	cpi	r18, 0x01	; 1
    129a:	31 05       	cpc	r19, r1
    129c:	61 f0       	breq	.+24     	; 0x12b6 <mDIO_ReadValueFromPin+0x5a>
    129e:	52 c0       	rjmp	.+164    	; 0x1344 <mDIO_ReadValueFromPin+0xe8>
    12a0:	4c 81       	ldd	r20, Y+4	; 0x04
    12a2:	5d 81       	ldd	r21, Y+5	; 0x05
    12a4:	43 30       	cpi	r20, 0x03	; 3
    12a6:	51 05       	cpc	r21, r1
    12a8:	51 f1       	breq	.+84     	; 0x12fe <mDIO_ReadValueFromPin+0xa2>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	91 05       	cpc	r25, r1
    12b2:	b9 f1       	breq	.+110    	; 0x1322 <mDIO_ReadValueFromPin+0xc6>
    12b4:	47 c0       	rjmp	.+142    	; 0x1344 <mDIO_ReadValueFromPin+0xe8>
		{
		case GroupA:InputValue=GetBit(PINA_Reg ,PinNumber);break;
    12b6:	e9 e3       	ldi	r30, 0x39	; 57
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <mDIO_ReadValueFromPin+0x72>
    12ca:	55 95       	asr	r21
    12cc:	47 95       	ror	r20
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <mDIO_ReadValueFromPin+0x6e>
    12d2:	ca 01       	movw	r24, r20
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	35 c0       	rjmp	.+106    	; 0x1344 <mDIO_ReadValueFromPin+0xe8>
		case GroupB:InputValue=GetBit(PINB_Reg,PinNumber);break;
    12da:	e6 e3       	ldi	r30, 0x36	; 54
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <mDIO_ReadValueFromPin+0x96>
    12ee:	55 95       	asr	r21
    12f0:	47 95       	ror	r20
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <mDIO_ReadValueFromPin+0x92>
    12f6:	ca 01       	movw	r24, r20
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	23 c0       	rjmp	.+70     	; 0x1344 <mDIO_ReadValueFromPin+0xe8>
		case GroupC:InputValue=GetBit(PINC_Reg,PinNumber);break;
    12fe:	e3 e3       	ldi	r30, 0x33	; 51
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <mDIO_ReadValueFromPin+0xba>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <mDIO_ReadValueFromPin+0xb6>
    131a:	ca 01       	movw	r24, r20
    131c:	81 70       	andi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <mDIO_ReadValueFromPin+0xe8>
		case GroupD:InputValue=GetBit(PIND_Reg,PinNumber);break;
    1322:	e0 e3       	ldi	r30, 0x30	; 48
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <mDIO_ReadValueFromPin+0xde>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <mDIO_ReadValueFromPin+0xda>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
		default :
			break;
		}
	}
	return  InputValue;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <mDIO_ChangeDirectionforGroup>:



void mDIO_ChangeDirectionforGroup(uint8_t GroupName , uint8_t DirecationValue)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <mDIO_ChangeDirectionforGroup+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <mDIO_ChangeDirectionforGroup+0x8>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	6a 83       	std	Y+2, r22	; 0x02

	if(DirecationValue>=0x00 && DirecationValue<=0xFF)
	{
		switch(GroupName)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3c 83       	std	Y+4, r19	; 0x04
    136e:	2b 83       	std	Y+3, r18	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	91 05       	cpc	r25, r1
    1378:	d9 f0       	breq	.+54     	; 0x13b0 <mDIO_ChangeDirectionforGroup+0x5a>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	23 30       	cpi	r18, 0x03	; 3
    1380:	31 05       	cpc	r19, r1
    1382:	34 f4       	brge	.+12     	; 0x1390 <mDIO_ChangeDirectionforGroup+0x3a>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	61 f0       	breq	.+24     	; 0x13a6 <mDIO_ChangeDirectionforGroup+0x50>
    138e:	1e c0       	rjmp	.+60     	; 0x13cc <mDIO_ChangeDirectionforGroup+0x76>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	23 30       	cpi	r18, 0x03	; 3
    1396:	31 05       	cpc	r19, r1
    1398:	81 f0       	breq	.+32     	; 0x13ba <mDIO_ChangeDirectionforGroup+0x64>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	91 05       	cpc	r25, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <mDIO_ChangeDirectionforGroup+0x6e>
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <mDIO_ChangeDirectionforGroup+0x76>
		{
		case GroupA: DDRA_Reg=DirecationValue;break;
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <mDIO_ChangeDirectionforGroup+0x76>
		case GroupB: DDRB_Reg=DirecationValue;break;
    13b0:	e7 e3       	ldi	r30, 0x37	; 55
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <mDIO_ChangeDirectionforGroup+0x76>
		case GroupC: DDRC_Reg=DirecationValue;break;
    13ba:	e4 e3       	ldi	r30, 0x34	; 52
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <mDIO_ChangeDirectionforGroup+0x76>
		case GroupD: DDRD_Reg=DirecationValue;break;
    13c4:	e1 e3       	ldi	r30, 0x31	; 49
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
	{
		// Output value out of Range
	}


}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <mDIO_WriteValueForGroup>:
void mDIO_WriteValueForGroup(uint8_t GroupName ,  uint8_t OutputValue)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <mDIO_WriteValueForGroup+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <mDIO_WriteValueForGroup+0x8>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	6a 83       	std	Y+2, r22	; 0x02
	if(OutputValue>=0x00 && OutputValue<=0xFF)
	{
		switch(GroupName)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3c 83       	std	Y+4, r19	; 0x04
    13f2:	2b 83       	std	Y+3, r18	; 0x03
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	d9 f0       	breq	.+54     	; 0x1434 <mDIO_WriteValueForGroup+0x5a>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	23 30       	cpi	r18, 0x03	; 3
    1404:	31 05       	cpc	r19, r1
    1406:	34 f4       	brge	.+12     	; 0x1414 <mDIO_WriteValueForGroup+0x3a>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	61 f0       	breq	.+24     	; 0x142a <mDIO_WriteValueForGroup+0x50>
    1412:	1e c0       	rjmp	.+60     	; 0x1450 <mDIO_WriteValueForGroup+0x76>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	23 30       	cpi	r18, 0x03	; 3
    141a:	31 05       	cpc	r19, r1
    141c:	81 f0       	breq	.+32     	; 0x143e <mDIO_WriteValueForGroup+0x64>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	91 05       	cpc	r25, r1
    1426:	81 f0       	breq	.+32     	; 0x1448 <mDIO_WriteValueForGroup+0x6e>
    1428:	13 c0       	rjmp	.+38     	; 0x1450 <mDIO_WriteValueForGroup+0x76>
		{
		case GroupA: PORTA_Reg=OutputValue;break;
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	80 83       	st	Z, r24
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <mDIO_WriteValueForGroup+0x76>
		case GroupB: PORTB_Reg=OutputValue;break;
    1434:	e8 e3       	ldi	r30, 0x38	; 56
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	80 83       	st	Z, r24
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <mDIO_WriteValueForGroup+0x76>
		case GroupC: PORTC_Reg=OutputValue;break;
    143e:	e5 e3       	ldi	r30, 0x35	; 53
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <mDIO_WriteValueForGroup+0x76>
		case GroupD: PORTD_Reg=OutputValue;break;
    1448:	e2 e3       	ldi	r30, 0x32	; 50
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
	else
	{
		// Output value out of Range
	}

}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <mDIO_ReadValueFromGroup>:
uint8_t mDIO_ReadValueFromGroup(uint8_t  GroupName)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <mDIO_ReadValueFromGroup+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <mDIO_ReadValueFromGroup+0x8>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	8a 83       	std	Y+2, r24	; 0x02
	// Task 5
	// Task3
	uint8_t InputValue ;
	switch(GroupName)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 83       	std	Y+4, r19	; 0x04
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	91 05       	cpc	r25, r1
    147e:	d9 f0       	breq	.+54     	; 0x14b6 <mDIO_ReadValueFromGroup+0x58>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	23 30       	cpi	r18, 0x03	; 3
    1486:	31 05       	cpc	r19, r1
    1488:	34 f4       	brge	.+12     	; 0x1496 <mDIO_ReadValueFromGroup+0x38>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	61 f0       	breq	.+24     	; 0x14ac <mDIO_ReadValueFromGroup+0x4e>
    1494:	1e c0       	rjmp	.+60     	; 0x14d2 <mDIO_ReadValueFromGroup+0x74>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	23 30       	cpi	r18, 0x03	; 3
    149c:	31 05       	cpc	r19, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <mDIO_ReadValueFromGroup+0x62>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	91 05       	cpc	r25, r1
    14a8:	81 f0       	breq	.+32     	; 0x14ca <mDIO_ReadValueFromGroup+0x6c>
    14aa:	13 c0       	rjmp	.+38     	; 0x14d2 <mDIO_ReadValueFromGroup+0x74>
	{
	case GroupA:InputValue=PINA_Reg;break;
    14ac:	e9 e3       	ldi	r30, 0x39	; 57
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <mDIO_ReadValueFromGroup+0x74>
	case GroupB:InputValue=PINB_Reg;break;
    14b6:	e6 e3       	ldi	r30, 0x36	; 54
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <mDIO_ReadValueFromGroup+0x74>
	case GroupC:InputValue=PINC_Reg;break;
    14c0:	e3 e3       	ldi	r30, 0x33	; 51
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <mDIO_ReadValueFromGroup+0x74>
	case GroupD:InputValue=PIND_Reg;break;
    14ca:	e0 e3       	ldi	r30, 0x30	; 48
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	89 83       	std	Y+1, r24	; 0x01
	default :  // GroupName Outof Rang
		break;
	}
	return InputValue;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01

}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <mADC_Init>:
 *4- Right Adjust
 *4- Seclect Prescaller / 8
 *5- Enable ADC
 *-  */
void mADC_Init()
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	/* No Interrupt
		1- ADIE in ADCSRA  Must be Zero
	*/
	ClearBit(ADCSRA_Reg,ADIE_Bit);
    14ea:	a6 e2       	ldi	r26, 0x26	; 38
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e6 e2       	ldi	r30, 0x26	; 38
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	87 7f       	andi	r24, 0xF7	; 247
    14f6:	8c 93       	st	X, r24
	/*
	 * Single Mode Conversion
	 * 1- ADATE in ADCSRA Must be Zero */
	ClearBit(ADCSRA_Reg,ADATE_Bit);
    14f8:	a6 e2       	ldi	r26, 0x26	; 38
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e6 e2       	ldi	r30, 0x26	; 38
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8f 7d       	andi	r24, 0xDF	; 223
    1504:	8c 93       	st	X, r24
	/*
	 * Aref == AVCC
	 * 1- REFS1 in ADMUX Must be 0
	 * 2- REFS0 in ADMUX Must be 1
	 * */
	ClearBit(ADMUX_Reg,REFS1_Bit);
    1506:	a7 e2       	ldi	r26, 0x27	; 39
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e7 e2       	ldi	r30, 0x27	; 39
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8f 77       	andi	r24, 0x7F	; 127
    1512:	8c 93       	st	X, r24
	SetBit(ADMUX_Reg,REFS0_Bit);
    1514:	a7 e2       	ldi	r26, 0x27	; 39
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e2       	ldi	r30, 0x27	; 39
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 64       	ori	r24, 0x40	; 64
    1520:	8c 93       	st	X, r24
	/*
	 *Right Adjust
	 *ADLAR in ADMUX Must be 0  */
	ClearBit(ADMUX_Reg,ADLAR_Bit);
    1522:	a7 e2       	ldi	r26, 0x27	; 39
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e2       	ldi	r30, 0x27	; 39
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 7d       	andi	r24, 0xDF	; 223
    152e:	8c 93       	st	X, r24
	/*Prescaller =  8
	 * 1- ADPS0 in ADCSRA Must be  1
	 * 2- ADPS1 in ADCSRA Must be  1
	 * 1- ADPS2 in ADCSRA Must be  0
	 * */
	SetBit(ADCSRA_Reg,ADPS0_Bit);
    1530:	a6 e2       	ldi	r26, 0x26	; 38
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e6 e2       	ldi	r30, 0x26	; 38
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADPS1_Bit);
    153e:	a6 e2       	ldi	r26, 0x26	; 38
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e6 e2       	ldi	r30, 0x26	; 38
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	8c 93       	st	X, r24
	ClearBit(ADCSRA_Reg,ADPS2_Bit);
    154c:	a6 e2       	ldi	r26, 0x26	; 38
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e6 e2       	ldi	r30, 0x26	; 38
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8b 7f       	andi	r24, 0xFB	; 251
    1558:	8c 93       	st	X, r24
	/*
	 * ADC Enbale
	 * 1- ADEN in ADCSRA Must be 1 */
	SetBit(ADCSRA_Reg,ADEN_Bit);
    155a:	a6 e2       	ldi	r26, 0x26	; 38
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e6 e2       	ldi	r30, 0x26	; 38
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 68       	ori	r24, 0x80	; 128
    1566:	8c 93       	st	X, r24
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <mADC_SignleEndedConversion>:

//mADC_SignleEndedConversion(5);
//mADC_SignleEndedConversion(7);

uint16_t mADC_SignleEndedConversion(uint8_t Channel)// 0 - 7 (00000111)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
	 * |      0 0 0 C4 C3 C2 C1 C0  ->
	 *
	 * */
	/*Channel */
//	Channel   = Channel & (0b00000111);
	Channel   = Channel & (0x07);
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	87 70       	andi	r24, 0x07	; 7
    157e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_Reg = ADMUX_Reg| Channel ;
    1580:	a7 e2       	ldi	r26, 0x27	; 39
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e7 e2       	ldi	r30, 0x27	; 39
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	90 81       	ld	r25, Z
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	89 2b       	or	r24, r25
    158e:	8c 93       	st	X, r24
	 * Ch|ADMUX ->  101 0 0111
	 *
	 * */
	/*Start Conversion
	 * 1- ADSC in ADCSRA must be 1 */
	SetBit(ADCSRA_Reg,ADSC_Bit);
    1590:	a6 e2       	ldi	r26, 0x26	; 38
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e6 e2       	ldi	r30, 0x26	; 38
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 64       	ori	r24, 0x40	; 64
    159c:	8c 93       	st	X, r24
	while(GetBit(ADCSRA_Reg,ADIF_Bit)==0)
    159e:	e6 e2       	ldi	r30, 0x26	; 38
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	82 95       	swap	r24
    15a6:	8f 70       	andi	r24, 0x0F	; 15
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	90 70       	andi	r25, 0x00	; 0
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	a9 f3       	breq	.-22     	; 0x159e <mADC_SignleEndedConversion+0x30>
		// Waiting
		// this loop will terminated when the ADIF = 1
	}
	// Clear ADIF By SW
		// Write Logic 1 on ADIF
	SetBit(ADCSRA_Reg,ADIF_Bit);
    15b4:	a6 e2       	ldi	r26, 0x26	; 38
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e6 e2       	ldi	r30, 0x26	; 38
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 61       	ori	r24, 0x10	; 16
    15c0:	8c 93       	st	X, r24
	return ADCData_Reg;
    15c2:	e4 e2       	ldi	r30, 0x24	; 36
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01

}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <hSSD_Init>:
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};

void hSSD_Init(uint8_t SSD_Group) {
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	89 83       	std	Y+1, r24	; 0x01
    mDIO_ChangeDirectionforGroup(SSD_Group, 0xFF); // All 8 pins as output
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	6f ef       	ldi	r22, 0xFF	; 255
    15e2:	0e 94 ab 09 	call	0x1356	; 0x1356 <mDIO_ChangeDirectionforGroup>
}
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <hSSD_DisplayNumber>:

void hSSD_DisplayNumber(uint8_t Number, uint8_t SSD_Group) {
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <hSSD_DisplayNumber+0x6>
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	6a 83       	std	Y+2, r22	; 0x02
    if (Number < 10) {
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	8a 30       	cpi	r24, 0x0A	; 10
    1600:	58 f4       	brcc	.+22     	; 0x1618 <hSSD_DisplayNumber+0x2a>
        mDIO_WriteValueForGroup(SSD_Group, SSD_LookupTable[Number]);
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	fc 01       	movw	r30, r24
    160a:	e5 51       	subi	r30, 0x15	; 21
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	90 81       	ld	r25, Z
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	69 2f       	mov	r22, r25
    1614:	0e 94 ed 09 	call	0x13da	; 0x13da <mDIO_WriteValueForGroup>
    }
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <hLed_Init>:

#include "../../../Inc/MCAL/DIO/DIO.h"
#include "../../../Inc/HAL/LED/LED.h"
#include "../../../Inc/Common/Macros.h"

void hLed_Init(uint8_t LedGroup, uint8_t LedPin) {
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <hLed_Init+0x6>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_ChangeDirectionForPin(LedGroup, LedPin, DIO_Output);
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	6a 81       	ldd	r22, Y+2	; 0x02
    1634:	41 e0       	ldi	r20, 0x01	; 1
    1636:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <hLed_On>:

void hLed_On(uint8_t LedGroup, uint8_t LedPin) {
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <hLed_On+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_WriteValueForPin(LedGroup, LedPin, DIO_Output);
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <hLed_Off>:

void hLed_Off(uint8_t LedGroup, uint8_t LedPin) {
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <hLed_Off+0x6>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_WriteValueForPin(LedGroup, LedPin, DIO_Input);
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	6a 81       	ldd	r22, Y+2	; 0x02
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <hLCD_Init>:
#include "../../../Inc/MCAL/DIO/DIO.h"
#include "../../../Inc/HAL/LCD/LCD.h"
#include "../../../Inc/Common/Macros.h"
#include <util/delay.h>
void hLCD_Init()
{
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	c6 54       	subi	r28, 0x46	; 70
    1696:	d0 40       	sbci	r29, 0x00	; 0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
	// Set Dirtection
	mDIO_ChangeDirectionForPin(LCD_RSGroup,LCD_RSPin,DIO_Output);
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(LCD_RWGroup,LCD_RWPin,DIO_Output);
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(LCD_EGroup,LCD_EPin,DIO_Output);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	//	mDIO_ChangeDirectionforGroup(LCD_DataGroup,DIO_Output); 0000 0001
	mDIO_ChangeDirectionforGroup(LCD_DataGroup,0xFF);
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	6f ef       	ldi	r22, 0xFF	; 255
    16c4:	0e 94 ab 09 	call	0x1356	; 0x1356 <mDIO_ChangeDirectionforGroup>
    16c8:	fe 01       	movw	r30, r28
    16ca:	ed 5b       	subi	r30, 0xBD	; 189
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	ac e0       	ldi	r26, 0x0C	; 12
    16d4:	b2 e4       	ldi	r27, 0x42	; 66
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16de:	8e 01       	movw	r16, r28
    16e0:	01 5c       	subi	r16, 0xC1	; 193
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	ed 5b       	subi	r30, 0xBD	; 189
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a e7       	ldi	r20, 0x7A	; 122
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    170c:	fe 01       	movw	r30, r28
    170e:	ff 96       	adiw	r30, 0x3f	; 63
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <hLCD_Init+0xaa>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9e af       	std	Y+62, r25	; 0x3e
    172e:	8d af       	std	Y+61, r24	; 0x3d
    1730:	46 c0       	rjmp	.+140    	; 0x17be <hLCD_Init+0x136>
	else if (__tmp > 65535)
    1732:	fe 01       	movw	r30, r28
    1734:	ff 96       	adiw	r30, 0x3f	; 63
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	64 f5       	brge	.+88     	; 0x17a6 <hLCD_Init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	fe 01       	movw	r30, r28
    1750:	ed 5b       	subi	r30, 0xBD	; 189
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e2       	ldi	r20, 0x20	; 32
    1762:	51 e4       	ldi	r21, 0x41	; 65
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e af       	std	Y+62, r25	; 0x3e
    177a:	8d af       	std	Y+61, r24	; 0x3d
    177c:	0f c0       	rjmp	.+30     	; 0x179c <hLCD_Init+0x114>
    177e:	89 e1       	ldi	r24, 0x19	; 25
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9c af       	std	Y+60, r25	; 0x3c
    1784:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1786:	8b ad       	ldd	r24, Y+59	; 0x3b
    1788:	9c ad       	ldd	r25, Y+60	; 0x3c
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <hLCD_Init+0x102>
    178e:	9c af       	std	Y+60, r25	; 0x3c
    1790:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	8d ad       	ldd	r24, Y+61	; 0x3d
    1794:	9e ad       	ldd	r25, Y+62	; 0x3e
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9e af       	std	Y+62, r25	; 0x3e
    179a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179c:	8d ad       	ldd	r24, Y+61	; 0x3d
    179e:	9e ad       	ldd	r25, Y+62	; 0x3e
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	69 f7       	brne	.-38     	; 0x177e <hLCD_Init+0xf6>
    17a4:	16 c0       	rjmp	.+44     	; 0x17d2 <hLCD_Init+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	fe 01       	movw	r30, r28
    17a8:	ff 96       	adiw	r30, 0x3f	; 63
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e af       	std	Y+62, r25	; 0x3e
    17bc:	8d af       	std	Y+61, r24	; 0x3d
    17be:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c2:	9a af       	std	Y+58, r25	; 0x3a
    17c4:	89 af       	std	Y+57, r24	; 0x39
    17c6:	89 ad       	ldd	r24, Y+57	; 0x39
    17c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <hLCD_Init+0x142>
    17ce:	9a af       	std	Y+58, r25	; 0x3a
    17d0:	89 af       	std	Y+57, r24	; 0x39

	/*Initaliaztion 8Bit Mode */
	//Delay More Than 30ms
	_delay_ms(35);
	// Function Set
	hLCD_SendCommand(0x38);
    17d2:	88 e3       	ldi	r24, 0x38	; 56
    17d4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e8       	ldi	r26, 0x80	; 128
    17de:	bf e3       	ldi	r27, 0x3F	; 63
    17e0:	8d ab       	std	Y+53, r24	; 0x35
    17e2:	9e ab       	std	Y+54, r25	; 0x36
    17e4:	af ab       	std	Y+55, r26	; 0x37
    17e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	6d a9       	ldd	r22, Y+53	; 0x35
    17ea:	7e a9       	ldd	r23, Y+54	; 0x36
    17ec:	8f a9       	ldd	r24, Y+55	; 0x37
    17ee:	98 ad       	ldd	r25, Y+56	; 0x38
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a e7       	ldi	r20, 0x7A	; 122
    17f6:	53 e4       	ldi	r21, 0x43	; 67
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	89 ab       	std	Y+49, r24	; 0x31
    1802:	9a ab       	std	Y+50, r25	; 0x32
    1804:	ab ab       	std	Y+51, r26	; 0x33
    1806:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1808:	69 a9       	ldd	r22, Y+49	; 0x31
    180a:	7a a9       	ldd	r23, Y+50	; 0x32
    180c:	8b a9       	ldd	r24, Y+51	; 0x33
    180e:	9c a9       	ldd	r25, Y+52	; 0x34
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <hLCD_Init+0x1a2>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	98 ab       	std	Y+48, r25	; 0x30
    1826:	8f a7       	std	Y+47, r24	; 0x2f
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <hLCD_Init+0x220>
	else if (__tmp > 65535)
    182a:	69 a9       	ldd	r22, Y+49	; 0x31
    182c:	7a a9       	ldd	r23, Y+50	; 0x32
    182e:	8b a9       	ldd	r24, Y+51	; 0x33
    1830:	9c a9       	ldd	r25, Y+52	; 0x34
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <hLCD_Init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	6d a9       	ldd	r22, Y+53	; 0x35
    1844:	7e a9       	ldd	r23, Y+54	; 0x36
    1846:	8f a9       	ldd	r24, Y+55	; 0x37
    1848:	98 ad       	ldd	r25, Y+56	; 0x38
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
    186a:	0f c0       	rjmp	.+30     	; 0x188a <hLCD_Init+0x202>
    186c:	89 e1       	ldi	r24, 0x19	; 25
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9e a7       	std	Y+46, r25	; 0x2e
    1872:	8d a7       	std	Y+45, r24	; 0x2d
    1874:	8d a5       	ldd	r24, Y+45	; 0x2d
    1876:	9e a5       	ldd	r25, Y+46	; 0x2e
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <hLCD_Init+0x1f0>
    187c:	9e a7       	std	Y+46, r25	; 0x2e
    187e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8f a5       	ldd	r24, Y+47	; 0x2f
    1882:	98 a9       	ldd	r25, Y+48	; 0x30
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	98 ab       	std	Y+48, r25	; 0x30
    1888:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8f a5       	ldd	r24, Y+47	; 0x2f
    188c:	98 a9       	ldd	r25, Y+48	; 0x30
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <hLCD_Init+0x1e4>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <hLCD_Init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	69 a9       	ldd	r22, Y+49	; 0x31
    1896:	7a a9       	ldd	r23, Y+50	; 0x32
    1898:	8b a9       	ldd	r24, Y+51	; 0x33
    189a:	9c a9       	ldd	r25, Y+52	; 0x34
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	98 ab       	std	Y+48, r25	; 0x30
    18a6:	8f a7       	std	Y+47, r24	; 0x2f
    18a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18aa:	98 a9       	ldd	r25, Y+48	; 0x30
    18ac:	9c a7       	std	Y+44, r25	; 0x2c
    18ae:	8b a7       	std	Y+43, r24	; 0x2b
    18b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <hLCD_Init+0x22c>
    18b8:	9c a7       	std	Y+44, r25	; 0x2c
    18ba:	8b a7       	std	Y+43, r24	; 0x2b
	//Delay More than 39us -> 1ms
	_delay_ms(1);
	//Display ON/OFF Control
	hLCD_SendCommand(0x0E);
    18bc:	8e e0       	ldi	r24, 0x0E	; 14
    18be:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e8       	ldi	r26, 0x80	; 128
    18c8:	bf e3       	ldi	r27, 0x3F	; 63
    18ca:	8f a3       	std	Y+39, r24	; 0x27
    18cc:	98 a7       	std	Y+40, r25	; 0x28
    18ce:	a9 a7       	std	Y+41, r26	; 0x29
    18d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6f a1       	ldd	r22, Y+39	; 0x27
    18d4:	78 a5       	ldd	r23, Y+40	; 0x28
    18d6:	89 a5       	ldd	r24, Y+41	; 0x29
    18d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a e7       	ldi	r20, 0x7A	; 122
    18e0:	53 e4       	ldi	r21, 0x43	; 67
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8b a3       	std	Y+35, r24	; 0x23
    18ec:	9c a3       	std	Y+36, r25	; 0x24
    18ee:	ad a3       	std	Y+37, r26	; 0x25
    18f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f2:	6b a1       	ldd	r22, Y+35	; 0x23
    18f4:	7c a1       	ldd	r23, Y+36	; 0x24
    18f6:	8d a1       	ldd	r24, Y+37	; 0x25
    18f8:	9e a1       	ldd	r25, Y+38	; 0x26
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <hLCD_Init+0x28c>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9a a3       	std	Y+34, r25	; 0x22
    1910:	89 a3       	std	Y+33, r24	; 0x21
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <hLCD_Init+0x30a>
	else if (__tmp > 65535)
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <hLCD_Init+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6f a1       	ldd	r22, Y+39	; 0x27
    192e:	78 a5       	ldd	r23, Y+40	; 0x28
    1930:	89 a5       	ldd	r24, Y+41	; 0x29
    1932:	9a a5       	ldd	r25, Y+42	; 0x2a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <hLCD_Init+0x2ec>
    1956:	89 e1       	ldi	r24, 0x19	; 25
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	98 a3       	std	Y+32, r25	; 0x20
    195c:	8f 8f       	std	Y+31, r24	; 0x1f
    195e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1960:	98 a1       	ldd	r25, Y+32	; 0x20
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <hLCD_Init+0x2da>
    1966:	98 a3       	std	Y+32, r25	; 0x20
    1968:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	89 a1       	ldd	r24, Y+33	; 0x21
    196c:	9a a1       	ldd	r25, Y+34	; 0x22
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9a a3       	std	Y+34, r25	; 0x22
    1972:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <hLCD_Init+0x2ce>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <hLCD_Init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6b a1       	ldd	r22, Y+35	; 0x23
    1980:	7c a1       	ldd	r23, Y+36	; 0x24
    1982:	8d a1       	ldd	r24, Y+37	; 0x25
    1984:	9e a1       	ldd	r25, Y+38	; 0x26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	9e 8f       	std	Y+30, r25	; 0x1e
    1998:	8d 8f       	std	Y+29, r24	; 0x1d
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <hLCD_Init+0x316>
    19a2:	9e 8f       	std	Y+30, r25	; 0x1e
    19a4:	8d 8f       	std	Y+29, r24	; 0x1d
	//Delay More than 39us -> 1ms
	_delay_ms(1);
	//Display Clear
	hLCD_SendCommand(0x01);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e4       	ldi	r27, 0x40	; 64
    19b4:	89 8f       	std	Y+25, r24	; 0x19
    19b6:	9a 8f       	std	Y+26, r25	; 0x1a
    19b8:	ab 8f       	std	Y+27, r26	; 0x1b
    19ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19bc:	69 8d       	ldd	r22, Y+25	; 0x19
    19be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a e7       	ldi	r20, 0x7A	; 122
    19ca:	53 e4       	ldi	r21, 0x43	; 67
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8d 8b       	std	Y+21, r24	; 0x15
    19d6:	9e 8b       	std	Y+22, r25	; 0x16
    19d8:	af 8b       	std	Y+23, r26	; 0x17
    19da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19dc:	6d 89       	ldd	r22, Y+21	; 0x15
    19de:	7e 89       	ldd	r23, Y+22	; 0x16
    19e0:	8f 89       	ldd	r24, Y+23	; 0x17
    19e2:	98 8d       	ldd	r25, Y+24	; 0x18
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <hLCD_Init+0x376>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9c 8b       	std	Y+20, r25	; 0x14
    19fa:	8b 8b       	std	Y+19, r24	; 0x13
    19fc:	3f c0       	rjmp	.+126    	; 0x1a7c <hLCD_Init+0x3f4>
	else if (__tmp > 65535)
    19fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1a00:	7e 89       	ldd	r23, Y+22	; 0x16
    1a02:	8f 89       	ldd	r24, Y+23	; 0x17
    1a04:	98 8d       	ldd	r25, Y+24	; 0x18
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	4c f5       	brge	.+82     	; 0x1a68 <hLCD_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	69 8d       	ldd	r22, Y+25	; 0x19
    1a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <hLCD_Init+0x3d6>
    1a40:	89 e1       	ldi	r24, 0x19	; 25
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9a 8b       	std	Y+18, r25	; 0x12
    1a46:	89 8b       	std	Y+17, r24	; 0x11
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <hLCD_Init+0x3c4>
    1a50:	9a 8b       	std	Y+18, r25	; 0x12
    1a52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <hLCD_Init+0x3b8>
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <hLCD_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9c 8b       	std	Y+20, r25	; 0x14
    1a7a:	8b 8b       	std	Y+19, r24	; 0x13
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	98 8b       	std	Y+16, r25	; 0x10
    1a82:	8f 87       	std	Y+15, r24	; 0x0f
    1a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a86:	98 89       	ldd	r25, Y+16	; 0x10
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <hLCD_Init+0x400>
    1a8c:	98 8b       	std	Y+16, r25	; 0x10
    1a8e:	8f 87       	std	Y+15, r24	; 0x0f
	//Delay More than 1.53ms ->2ms
	_delay_ms(2);
	//	Entry Mode Set
	hLCD_SendCommand(0x06);
    1a90:	86 e0       	ldi	r24, 0x06	; 6
    1a92:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e8       	ldi	r26, 0x80	; 128
    1a9c:	bf e3       	ldi	r27, 0x3F	; 63
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b
    1aa0:	9c 87       	std	Y+12, r25	; 0x0c
    1aa2:	ad 87       	std	Y+13, r26	; 0x0d
    1aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a e7       	ldi	r20, 0x7A	; 122
    1ab4:	53 e4       	ldi	r21, 0x43	; 67
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
    1ac2:	a9 87       	std	Y+9, r26	; 0x09
    1ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <hLCD_Init+0x460>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <hLCD_Init+0x4de>
	else if (__tmp > 65535)
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <hLCD_Init+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <hLCD_Init+0x4c0>
    1b2a:	89 e1       	ldi	r24, 0x19	; 25
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <hLCD_Init+0x4ae>
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <hLCD_Init+0x4a2>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <hLCD_Init+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <hLCD_Init+0x4ea>
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);



}
    1b7a:	ca 5b       	subi	r28, 0xBA	; 186
    1b7c:	df 4f       	sbci	r29, 0xFF	; 255
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	08 95       	ret

00001b92 <hLCD_SendCommand>:
void hLCD_SendCommand(uint8_t Command)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	// RS -> 0
	mDIO_WriteValueForPin(LCD_RSGroup,LCD_RSPin,DIO_Low);
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	// RW -> 0
	mDIO_WriteValueForPin(LCD_RWGroup,LCD_RWPin,DIO_Low);
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	// E  -> 1
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_High);
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	// UpdateCommand
	mDIO_WriteValueForGroup(LCD_DataGroup,Command);
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	69 81       	ldd	r22, Y+1	; 0x01
    1bc0:	0e 94 ed 09 	call	0x13da	; 0x13da <mDIO_WriteValueForGroup>
	// E  -> 0
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_Low);
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
}
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <hLCD_SendChar>:

void hLCD_SendChar(uint8_t Character)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
	//	RS ->1
	mDIO_WriteValueForPin(LCD_RSGroup,LCD_RSPin,DIO_High);
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	//RW -> 0
	mDIO_WriteValueForPin(LCD_RWGroup,LCD_RWPin,DIO_Low);
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	// E -1
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_High);
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	//Updata data
	mDIO_WriteValueForGroup(LCD_DataGroup,Character);
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	69 81       	ldd	r22, Y+1	; 0x01
    1c04:	0e 94 ed 09 	call	0x13da	; 0x13da <mDIO_WriteValueForGroup>
	//E - 0
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_Low);
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>

}
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <hLCD_SendString>:



void hLCD_SendString(uint8_t Str[])
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <hLCD_SendString+0x6>
    1c20:	0f 92       	push	r0
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	9b 83       	std	Y+3, r25	; 0x03
    1c28:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Index = 0 ;
    1c2a:	19 82       	std	Y+1, r1	; 0x01
	if(Str!=NULL)
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	d1 f0       	breq	.+52     	; 0x1c68 <hLCD_SendString+0x4e>
    1c34:	0e c0       	rjmp	.+28     	; 0x1c52 <hLCD_SendString+0x38>
	{
		while(Str[Index]!=NULLChar)
		{
			hLCD_SendChar(Str[Index]);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	80 81       	ld	r24, Z
    1c48:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hLCD_SendChar>
			Index++;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	89 83       	std	Y+1, r24	; 0x01
void hLCD_SendString(uint8_t Str[])
{
	uint8_t Index = 0 ;
	if(Str!=NULL)
	{
		while(Str[Index]!=NULLChar)
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	e2 0f       	add	r30, r18
    1c60:	f3 1f       	adc	r31, r19
    1c62:	80 81       	ld	r24, Z
    1c64:	88 23       	and	r24, r24
    1c66:	39 f7       	brne	.-50     	; 0x1c36 <hLCD_SendString+0x1c>
		{
			hLCD_SendChar(Str[Index]);
			Index++;
		}
	}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <hLCD_SendNumber>:

void hLCD_SendNumber(uint32_t Number)
{
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	60 97       	sbiw	r28, 0x10	; 16
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	6d 87       	std	Y+13, r22	; 0x0d
    1c8e:	7e 87       	std	Y+14, r23	; 0x0e
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	98 8b       	std	Y+16, r25	; 0x10
    if (Number == 0)
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	af 85       	ldd	r26, Y+15	; 0x0f
    1c9a:	b8 89       	ldd	r27, Y+16	; 0x10
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	a1 05       	cpc	r26, r1
    1ca0:	b1 05       	cpc	r27, r1
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <hLCD_SendNumber+0x38>
    {
        hLCD_SendChar('0');
    1ca4:	80 e3       	ldi	r24, 0x30	; 48
    1ca6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hLCD_SendChar>
    1caa:	4a c0       	rjmp	.+148    	; 0x1d40 <hLCD_SendNumber+0xcc>
        return;
    }

    char buffer[11];
    uint8_t i = 0;
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	2e c0       	rjmp	.+92     	; 0x1d0c <hLCD_SendNumber+0x98>


    while (Number > 0)
    {
        buffer[i++] = (Number % 10) + '0';
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	08 2f       	mov	r16, r24
    1cb4:	10 e0       	ldi	r17, 0x00	; 0
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	af 85       	ldd	r26, Y+15	; 0x0f
    1cbc:	b8 89       	ldd	r27, Y+16	; 0x10
    1cbe:	2a e0       	ldi	r18, 0x0A	; 10
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__udivmodsi4>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	20 5d       	subi	r18, 0xD0	; 208
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	02 96       	adiw	r24, 0x02	; 2
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e0 0f       	add	r30, r16
    1cde:	f1 1f       	adc	r31, r17
    1ce0:	20 83       	st	Z, r18
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	89 83       	std	Y+1, r24	; 0x01
        Number /= 10;
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	af 85       	ldd	r26, Y+15	; 0x0f
    1cee:	b8 89       	ldd	r27, Y+16	; 0x10
    1cf0:	2a e0       	ldi	r18, 0x0A	; 10
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <__udivmodsi4>
    1d00:	da 01       	movw	r26, r20
    1d02:	c9 01       	movw	r24, r18
    1d04:	8d 87       	std	Y+13, r24	; 0x0d
    1d06:	9e 87       	std	Y+14, r25	; 0x0e
    1d08:	af 87       	std	Y+15, r26	; 0x0f
    1d0a:	b8 8b       	std	Y+16, r27	; 0x10

    char buffer[11];
    uint8_t i = 0;


    while (Number > 0)
    1d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d10:	af 85       	ldd	r26, Y+15	; 0x0f
    1d12:	b8 89       	ldd	r27, Y+16	; 0x10
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	a1 05       	cpc	r26, r1
    1d18:	b1 05       	cpc	r27, r1
    1d1a:	51 f6       	brne	.-108    	; 0x1cb0 <hLCD_SendNumber+0x3c>
    1d1c:	0e c0       	rjmp	.+28     	; 0x1d3a <hLCD_SendNumber+0xc6>
    }


    while (i > 0)
    {
        hLCD_SendChar(buffer[--i]);
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	81 50       	subi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	02 96       	adiw	r24, 0x02	; 2
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e2 0f       	add	r30, r18
    1d32:	f3 1f       	adc	r31, r19
    1d34:	80 81       	ld	r24, Z
    1d36:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hLCD_SendChar>
        buffer[i++] = (Number % 10) + '0';
        Number /= 10;
    }


    while (i > 0)
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	88 23       	and	r24, r24
    1d3e:	79 f7       	brne	.-34     	; 0x1d1e <hLCD_SendNumber+0xaa>
    {
        hLCD_SendChar(buffer[--i]);
    }
}
    1d40:	60 96       	adiw	r28, 0x10	; 16
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <hLCD_StoreSpecialChar>:

void hLCD_StoreSpecialChar(uint8_t *Pattern, uint8_t Location)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <hLCD_StoreSpecialChar+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <hLCD_StoreSpecialChar+0x8>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	6c 83       	std	Y+4, r22	; 0x04
    if (Location > 7){
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	88 30       	cpi	r24, 0x08	; 8
    1d6c:	10 f5       	brcc	.+68     	; 0x1db2 <hLCD_StoreSpecialChar+0x5c>
    	return;
    }



    hLCD_SendCommand(0x40 + (Location * 8));
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	08 96       	adiw	r24, 0x08	; 8
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>

    for (uint8_t i = 0; i < 8; i++)
    1d86:	19 82       	std	Y+1, r1	; 0x01
    1d88:	0e c0       	rjmp	.+28     	; 0x1da6 <hLCD_StoreSpecialChar+0x50>
    {
        hLCD_SendChar(Pattern[i]);
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	fc 01       	movw	r30, r24
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	80 81       	ld	r24, Z
    1d9c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hLCD_SendChar>



    hLCD_SendCommand(0x40 + (Location * 8));

    for (uint8_t i = 0; i < 8; i++)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	88 30       	cpi	r24, 0x08	; 8
    1daa:	78 f3       	brcs	.-34     	; 0x1d8a <hLCD_StoreSpecialChar+0x34>
    {
        hLCD_SendChar(Pattern[i]);
    }

    hLCD_SendCommand(0x80);
    1dac:	80 e8       	ldi	r24, 0x80	; 128
    1dae:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <hLCD_MoveCursor>:


void hLCD_MoveCursor(uint8_t Line ,uint8_t Digit)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	63 97       	sbiw	r28, 0x13	; 19
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	88 8b       	std	Y+16, r24	; 0x10
    1dd6:	69 8b       	std	Y+17, r22	; 0x11


	uint8_t DDRAM_Address = 0 ;
    1dd8:	1f 86       	std	Y+15, r1	; 0x0f
	switch(Line)
    1dda:	88 89       	ldd	r24, Y+16	; 0x10
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	3b 8b       	std	Y+19, r19	; 0x13
    1de2:	2a 8b       	std	Y+18, r18	; 0x12
    1de4:	8a 89       	ldd	r24, Y+18	; 0x12
    1de6:	9b 89       	ldd	r25, Y+19	; 0x13
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	91 05       	cpc	r25, r1
    1dec:	31 f0       	breq	.+12     	; 0x1dfa <hLCD_MoveCursor+0x3a>
    1dee:	2a 89       	ldd	r18, Y+18	; 0x12
    1df0:	3b 89       	ldd	r19, Y+19	; 0x13
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	21 f0       	breq	.+8      	; 0x1e00 <hLCD_MoveCursor+0x40>
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <hLCD_MoveCursor+0x46>
	{
	case 1 :  DDRAM_Address = 0x00 + Digit ;break;
    1dfa:	89 89       	ldd	r24, Y+17	; 0x11
    1dfc:	8f 87       	std	Y+15, r24	; 0x0f
    1dfe:	03 c0       	rjmp	.+6      	; 0x1e06 <hLCD_MoveCursor+0x46>
	case 2 :  DDRAM_Address = 0x40 + Digit ;break;
    1e00:	89 89       	ldd	r24, Y+17	; 0x11
    1e02:	80 5c       	subi	r24, 0xC0	; 192
    1e04:	8f 87       	std	Y+15, r24	; 0x0f
	default:
			break;
	}


	hLCD_SendCommand(128+DDRAM_Address);
    1e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e08:	80 58       	subi	r24, 0x80	; 128
    1e0a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	ad 87       	std	Y+13, r26	; 0x0d
    1e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a e7       	ldi	r20, 0x7A	; 122
    1e2c:	53 e4       	ldi	r21, 0x43	; 67
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8f 83       	std	Y+7, r24	; 0x07
    1e38:	98 87       	std	Y+8, r25	; 0x08
    1e3a:	a9 87       	std	Y+9, r26	; 0x09
    1e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <hLCD_MoveCursor+0xa0>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <hLCD_MoveCursor+0x11e>
	else if (__tmp > 65535)
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <hLCD_MoveCursor+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <hLCD_MoveCursor+0x100>
    1ea2:	89 e1       	ldi	r24, 0x19	; 25
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <hLCD_MoveCursor+0xee>
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <hLCD_MoveCursor+0xe2>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <hLCD_MoveCursor+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <hLCD_MoveCursor+0x12a>
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ef2:	63 96       	adiw	r28, 0x13	; 19
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <hKPD_Init>:
		{'7','8','9'},//R2
};


void hKPD_Init()
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
	//Set Dirction
	mDIO_ChangeDirectionForPin(KPD_R0Group,KPD_R0Pin,DIO_Input);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(KPD_R1Group,KPD_R1Pin,DIO_Input);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(KPD_R2Group,KPD_R2Pin,DIO_Input);
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>

	//Enable Pull
	mDIO_WriteValueForPin(KPD_R0Group,KPD_R0Pin,DIO_High);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	mDIO_WriteValueForPin(KPD_R1Group,KPD_R1Pin,DIO_High);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	mDIO_WriteValueForPin(KPD_R2Group,KPD_R2Pin,DIO_High);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	62 e0       	ldi	r22, 0x02	; 2
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>

	//Set Direction for Coloum
	mDIO_ChangeDirectionForPin(KPD_C0Group,KPD_C0Pin,DIO_Output);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	63 e0       	ldi	r22, 0x03	; 3
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(KPD_C1Group,KPD_C1Pin,DIO_Output);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	64 e0       	ldi	r22, 0x04	; 4
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(KPD_C2Group,KPD_C2Pin,DIO_Output);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	65 e0       	ldi	r22, 0x05	; 5
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>

	//Set Dafulat Value for Coloum
	mDIO_WriteValueForPin(KPD_C0Group,KPD_C0Pin,DIO_High);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	63 e0       	ldi	r22, 0x03	; 3
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	mDIO_WriteValueForPin(KPD_C1Group,KPD_C1Pin,DIO_High);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	64 e0       	ldi	r22, 0x04	; 4
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
	mDIO_WriteValueForPin(KPD_C2Group,KPD_C2Pin,DIO_High);
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	65 e0       	ldi	r22, 0x05	; 5
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>

}
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <hKPD_GetButton>:
uint8_t hKPD_GetButton()
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	62 97       	sbiw	r28, 0x12	; 18
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
	int8_t ButtonState = -1 ;
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	89 8b       	std	Y+17, r24	; 0x11
	for(uint8_t C = 0 ; C <KPD_Coloum;C++)
    1fa2:	18 8a       	std	Y+16, r1	; 0x10
    1fa4:	e1 c0       	rjmp	.+450    	; 0x2168 <hKPD_GetButton+0x1de>
	{
		mDIO_WriteValueForPin(KPD_ColoumGroup[C],KPD_ColoumPin[C],DIO_Low);
    1fa6:	88 89       	ldd	r24, Y+16	; 0x10
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	fc 01       	movw	r30, r24
    1fae:	e0 53       	subi	r30, 0x30	; 48
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	20 81       	ld	r18, Z
    1fb4:	88 89       	ldd	r24, Y+16	; 0x10
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	fc 01       	movw	r30, r24
    1fbc:	ed 52       	subi	r30, 0x2D	; 45
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	90 81       	ld	r25, Z
    1fc2:	82 2f       	mov	r24, r18
    1fc4:	69 2f       	mov	r22, r25
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
		for(uint8_t R = 0 ; R<KPD_Row;R++)
    1fcc:	1f 86       	std	Y+15, r1	; 0x0f
    1fce:	b2 c0       	rjmp	.+356    	; 0x2134 <hKPD_GetButton+0x1aa>
		{
				ButtonState=mDIO_ReadValueFromPin(KPD_RowGroup[R],KPD_RowPin[R]);
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	ea 52       	subi	r30, 0x2A	; 42
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	20 81       	ld	r18, Z
    1fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	e7 52       	subi	r30, 0x27	; 39
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	90 81       	ld	r25, Z
    1fec:	82 2f       	mov	r24, r18
    1fee:	69 2f       	mov	r22, r25
    1ff0:	0e 94 2e 09 	call	0x125c	; 0x125c <mDIO_ReadValueFromPin>
    1ff4:	89 8b       	std	Y+17, r24	; 0x11
				if(ButtonState==Pressed)
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <hKPD_GetButton+0x74>
    1ffc:	98 c0       	rjmp	.+304    	; 0x212e <hKPD_GetButton+0x1a4>
				{
					mDIO_WriteValueForPin(KPD_ColoumGroup[C],KPD_ColoumPin[C],DIO_High);
    1ffe:	88 89       	ldd	r24, Y+16	; 0x10
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	fc 01       	movw	r30, r24
    2006:	e0 53       	subi	r30, 0x30	; 48
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	20 81       	ld	r18, Z
    200c:	88 89       	ldd	r24, Y+16	; 0x10
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	fc 01       	movw	r30, r24
    2014:	ed 52       	subi	r30, 0x2D	; 45
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	90 81       	ld	r25, Z
    201a:	82 2f       	mov	r24, r18
    201c:	69 2f       	mov	r22, r25
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a6 e1       	ldi	r26, 0x16	; 22
    202a:	b3 e4       	ldi	r27, 0x43	; 67
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	ad 87       	std	Y+13, r26	; 0x0d
    2032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	53 e4       	ldi	r21, 0x43	; 67
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <hKPD_GetButton+0xec>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <hKPD_GetButton+0x16a>
	else if (__tmp > 65535)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <hKPD_GetButton+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <hKPD_GetButton+0x14c>
    20b8:	89 e1       	ldi	r24, 0x19	; 25
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <hKPD_GetButton+0x13a>
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <hKPD_GetButton+0x12e>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <hKPD_GetButton+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <hKPD_GetButton+0x176>
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(150);
					return KPDName[R][C];
    2108:	8f 85       	ldd	r24, Y+15	; 0x0f
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	88 89       	ldd	r24, Y+16	; 0x10
    2110:	48 2f       	mov	r20, r24
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	c9 01       	movw	r24, r18
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	82 0f       	add	r24, r18
    211c:	93 1f       	adc	r25, r19
    211e:	84 0f       	add	r24, r20
    2120:	95 1f       	adc	r25, r21
    2122:	fc 01       	movw	r30, r24
    2124:	e4 52       	subi	r30, 0x24	; 36
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	8a 8b       	std	Y+18, r24	; 0x12
    212c:	23 c0       	rjmp	.+70     	; 0x2174 <hKPD_GetButton+0x1ea>
{
	int8_t ButtonState = -1 ;
	for(uint8_t C = 0 ; C <KPD_Coloum;C++)
	{
		mDIO_WriteValueForPin(KPD_ColoumGroup[C],KPD_ColoumPin[C],DIO_Low);
		for(uint8_t R = 0 ; R<KPD_Row;R++)
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	8f 87       	std	Y+15, r24	; 0x0f
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	83 30       	cpi	r24, 0x03	; 3
    2138:	08 f4       	brcc	.+2      	; 0x213c <hKPD_GetButton+0x1b2>
    213a:	4a cf       	rjmp	.-364    	; 0x1fd0 <hKPD_GetButton+0x46>
					mDIO_WriteValueForPin(KPD_ColoumGroup[C],KPD_ColoumPin[C],DIO_High);
					_delay_ms(150);
					return KPDName[R][C];
				}
		}
		mDIO_WriteValueForPin(KPD_ColoumGroup[C],KPD_ColoumPin[C],DIO_High);
    213c:	88 89       	ldd	r24, Y+16	; 0x10
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	fc 01       	movw	r30, r24
    2144:	e0 53       	subi	r30, 0x30	; 48
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	20 81       	ld	r18, Z
    214a:	88 89       	ldd	r24, Y+16	; 0x10
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	fc 01       	movw	r30, r24
    2152:	ed 52       	subi	r30, 0x2D	; 45
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	90 81       	ld	r25, Z
    2158:	82 2f       	mov	r24, r18
    215a:	69 2f       	mov	r22, r25
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>

}
uint8_t hKPD_GetButton()
{
	int8_t ButtonState = -1 ;
	for(uint8_t C = 0 ; C <KPD_Coloum;C++)
    2162:	88 89       	ldd	r24, Y+16	; 0x10
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	88 8b       	std	Y+16, r24	; 0x10
    2168:	88 89       	ldd	r24, Y+16	; 0x10
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	08 f4       	brcc	.+2      	; 0x2170 <hKPD_GetButton+0x1e6>
    216e:	1b cf       	rjmp	.-458    	; 0x1fa6 <hKPD_GetButton+0x1c>
					return KPDName[R][C];
				}
		}
		mDIO_WriteValueForPin(KPD_ColoumGroup[C],KPD_ColoumPin[C],DIO_High);
	}
	return 0xFF;
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	8a 8b       	std	Y+18, r24	; 0x12
    2174:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2176:	62 96       	adiw	r28, 0x12	; 18
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <hButton_Init>:

#include "../../../Inc/MCAL/DIO/DIO.h"
#include "../../../Inc/HAL/BUTTON/BUTTON.h"
#include "../../../Inc/Common/Macros.h"

void hButton_Init(uint8_t ButtonGroup, uint8_t ButtonPin) {
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <hButton_Init+0x6>
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_ChangeDirectionForPin(ButtonGroup, ButtonPin, DIO_Input);
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	6a 81       	ldd	r22, Y+2	; 0x02
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>
    mDIO_WriteValueForPin(ButtonGroup, ButtonPin, DIO_Output); // Enable internal pull-up
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	6a 81       	ldd	r22, Y+2	; 0x02
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 28 08 	call	0x1050	; 0x1050 <mDIO_WriteValueForPin>
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <hButton_IsPressed>:

uint8_t hButton_IsPressed(uint8_t ButtonGroup, uint8_t ButtonPin) {
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <hButton_IsPressed+0x6>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	6a 83       	std	Y+2, r22	; 0x02
    return (mDIO_ReadValueFromPin(ButtonGroup, ButtonPin) == 0); // Active Low
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	6a 81       	ldd	r22, Y+2	; 0x02
    21c8:	0e 94 2e 09 	call	0x125c	; 0x125c <mDIO_ReadValueFromPin>
    21cc:	1b 82       	std	Y+3, r1	; 0x03
    21ce:	88 23       	and	r24, r24
    21d0:	11 f4       	brne	.+4      	; 0x21d6 <hButton_IsPressed+0x22>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <System_Init>:
 *      Author: DELL
 */
#include "Project_init.h"

/*  System Initialization  */
void System_Init() {
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	2e 97       	sbiw	r28, 0x0e	; 14
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    hLCD_Init();
    21f8:	0e 94 44 0b 	call	0x1688	; 0x1688 <hLCD_Init>
    hKPD_Init();
    21fc:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <hKPD_Init>
    mUART_Init();
    2200:	0e 94 a3 05 	call	0xb46	; 0xb46 <mUART_Init>
    hLed_Init(GREEN_LED_PORT, GREEN_LED_PIN);
    2204:	84 e0       	ldi	r24, 0x04	; 4
    2206:	64 e0       	ldi	r22, 0x04	; 4
    2208:	0e 94 11 0b 	call	0x1622	; 0x1622 <hLed_Init>
    hLed_Init(RED_LED_PORT, RED_LED_PIN);
    220c:	84 e0       	ldi	r24, 0x04	; 4
    220e:	65 e0       	ldi	r22, 0x05	; 5
    2210:	0e 94 11 0b 	call	0x1622	; 0x1622 <hLed_Init>
    mDIO_ChangeDirectionForPin(ADMIN_BUTTON_PORT, ADMIN_BUTTON_PIN, DIO_Input);
    2214:	84 e0       	ldi	r24, 0x04	; 4
    2216:	63 e0       	ldi	r22, 0x03	; 3
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 22 07 	call	0xe44	; 0xe44 <mDIO_ChangeDirectionForPin>

    mEXTI0_Enable(EXTI_Falling);
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mEXTI0_Enable>
    mGIE_Enable();
    2224:	0e 94 8a 06 	call	0xd14	; 0xd14 <mGIE_Enable>

    hLCD_SendString("System Ready");
    2228:	80 e6       	ldi	r24, 0x60	; 96
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	aa e7       	ldi	r26, 0x7A	; 122
    2236:	b4 e4       	ldi	r27, 0x44	; 68
    2238:	8b 87       	std	Y+11, r24	; 0x0b
    223a:	9c 87       	std	Y+12, r25	; 0x0c
    223c:	ad 87       	std	Y+13, r26	; 0x0d
    223e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	6b 85       	ldd	r22, Y+11	; 0x0b
    2242:	7c 85       	ldd	r23, Y+12	; 0x0c
    2244:	8d 85       	ldd	r24, Y+13	; 0x0d
    2246:	9e 85       	ldd	r25, Y+14	; 0x0e
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	53 e4       	ldi	r21, 0x43	; 67
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8f 83       	std	Y+7, r24	; 0x07
    225a:	98 87       	std	Y+8, r25	; 0x08
    225c:	a9 87       	std	Y+9, r26	; 0x09
    225e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2260:	6f 81       	ldd	r22, Y+7	; 0x07
    2262:	78 85       	ldd	r23, Y+8	; 0x08
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	9a 85       	ldd	r25, Y+10	; 0x0a
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2274:	88 23       	and	r24, r24
    2276:	2c f4       	brge	.+10     	; 0x2282 <System_Init+0x9e>
		__ticks = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	3f c0       	rjmp	.+126    	; 0x2300 <System_Init+0x11c>
	else if (__tmp > 65535)
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	4c f5       	brge	.+82     	; 0x22ec <System_Init+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e2       	ldi	r20, 0x20	; 32
    22a8:	51 e4       	ldi	r21, 0x41	; 65
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	0f c0       	rjmp	.+30     	; 0x22e2 <System_Init+0xfe>
    22c4:	89 e1       	ldi	r24, 0x19	; 25
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <System_Init+0xec>
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	69 f7       	brne	.-38     	; 0x22c4 <System_Init+0xe0>
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <System_Init+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ec:	6f 81       	ldd	r22, Y+7	; 0x07
    22ee:	78 85       	ldd	r23, Y+8	; 0x08
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <System_Init+0x128>
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
}
    2314:	2e 96       	adiw	r28, 0x0e	; 14
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <EnterPassword>:

/*  Get Password from Keypad  */
void EnterPassword(char* input) {
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	62 97       	sbiw	r28, 0x12	; 18
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	9a 8b       	std	Y+18, r25	; 0x12
    233c:	89 8b       	std	Y+17, r24	; 0x11
    uint8_t i = 0;
    233e:	18 8a       	std	Y+16, r1	; 0x10
    2340:	89 c0       	rjmp	.+274    	; 0x2454 <EnterPassword+0x12e>
    while (i < PASSWORD_LENGTH) {
        uint8_t key = hKPD_GetButton();
    2342:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <hKPD_GetButton>
    2346:	8f 87       	std	Y+15, r24	; 0x0f
        if (key != 0xFF) {
    2348:	8f 85       	ldd	r24, Y+15	; 0x0f
    234a:	8f 3f       	cpi	r24, 0xFF	; 255
    234c:	09 f4       	brne	.+2      	; 0x2350 <EnterPassword+0x2a>
    234e:	82 c0       	rjmp	.+260    	; 0x2454 <EnterPassword+0x12e>
            input[i] = key;
    2350:	88 89       	ldd	r24, Y+16	; 0x10
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	89 89       	ldd	r24, Y+17	; 0x11
    2358:	9a 89       	ldd	r25, Y+18	; 0x12
    235a:	fc 01       	movw	r30, r24
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	8f 85       	ldd	r24, Y+15	; 0x0f
    2362:	80 83       	st	Z, r24
            hLCD_SendChar('*');
    2364:	8a e2       	ldi	r24, 0x2A	; 42
    2366:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hLCD_SendChar>
            i++;
    236a:	88 89       	ldd	r24, Y+16	; 0x10
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	88 8b       	std	Y+16, r24	; 0x10
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a8 e4       	ldi	r26, 0x48	; 72
    2376:	b3 e4       	ldi	r27, 0x43	; 67
    2378:	8b 87       	std	Y+11, r24	; 0x0b
    237a:	9c 87       	std	Y+12, r25	; 0x0c
    237c:	ad 87       	std	Y+13, r26	; 0x0d
    237e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	6b 85       	ldd	r22, Y+11	; 0x0b
    2382:	7c 85       	ldd	r23, Y+12	; 0x0c
    2384:	8d 85       	ldd	r24, Y+13	; 0x0d
    2386:	9e 85       	ldd	r25, Y+14	; 0x0e
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	53 e4       	ldi	r21, 0x43	; 67
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8f 83       	std	Y+7, r24	; 0x07
    239a:	98 87       	std	Y+8, r25	; 0x08
    239c:	a9 87       	std	Y+9, r26	; 0x09
    239e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <EnterPassword+0x9c>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <EnterPassword+0x11a>
	else if (__tmp > 65535)
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <EnterPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <EnterPassword+0xfc>
    2404:	89 e1       	ldi	r24, 0x19	; 25
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <EnterPassword+0xea>
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <EnterPassword+0xde>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <EnterPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <EnterPassword+0x126>
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
}

/*  Get Password from Keypad  */
void EnterPassword(char* input) {
    uint8_t i = 0;
    while (i < PASSWORD_LENGTH) {
    2454:	88 89       	ldd	r24, Y+16	; 0x10
    2456:	84 30       	cpi	r24, 0x04	; 4
    2458:	08 f4       	brcc	.+2      	; 0x245c <EnterPassword+0x136>
    245a:	73 cf       	rjmp	.-282    	; 0x2342 <EnterPassword+0x1c>
            hLCD_SendChar('*');
            i++;
            _delay_ms(200);
        }
    }
    input[i] = '\0';
    245c:	88 89       	ldd	r24, Y+16	; 0x10
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	89 89       	ldd	r24, Y+17	; 0x11
    2464:	9a 89       	ldd	r25, Y+18	; 0x12
    2466:	fc 01       	movw	r30, r24
    2468:	e2 0f       	add	r30, r18
    246a:	f3 1f       	adc	r31, r19
    246c:	10 82       	st	Z, r1
}
    246e:	62 96       	adiw	r28, 0x12	; 18
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <CheckPassword>:

/*  Compare Input with Stored Password  */
bool CheckPassword(char* input) {
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <CheckPassword+0x6>
    2486:	0f 92       	push	r0
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    return strcmp(input, storedPassword) == 0;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	26 ee       	ldi	r18, 0xE6	; 230
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	b9 01       	movw	r22, r18
    249a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <strcmp>
    249e:	1b 82       	std	Y+3, r1	; 0x03
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	11 f4       	brne	.+4      	; 0x24a8 <CheckPassword+0x28>
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	8b 83       	std	Y+3, r24	; 0x03
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <GrantAccess>:

/*  Access Granted  */
void GrantAccess() {
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	2e 97       	sbiw	r28, 0x0e	; 14
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    hLCD_SendCommand(0x01);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    hLCD_MoveCursor(FirstLine, 1);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
    hLCD_SendString("Access Succesfully");
    24d8:	8d e6       	ldi	r24, 0x6D	; 109
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
    hLed_On(GREEN_LED_PORT, GREEN_LED_PIN);
    24e0:	84 e0       	ldi	r24, 0x04	; 4
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	0e 94 22 0b 	call	0x1644	; 0x1644 <hLed_On>
    mUART_SendString("Access Succesfully");
    24e8:	8d e6       	ldi	r24, 0x6D	; 109
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <mUART_SendString>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e4       	ldi	r25, 0x40	; 64
    24f4:	ac e9       	ldi	r26, 0x9C	; 156
    24f6:	b5 e4       	ldi	r27, 0x45	; 69
    24f8:	8b 87       	std	Y+11, r24	; 0x0b
    24fa:	9c 87       	std	Y+12, r25	; 0x0c
    24fc:	ad 87       	std	Y+13, r26	; 0x0d
    24fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a e7       	ldi	r20, 0x7A	; 122
    250e:	53 e4       	ldi	r21, 0x43	; 67
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8f 83       	std	Y+7, r24	; 0x07
    251a:	98 87       	std	Y+8, r25	; 0x08
    251c:	a9 87       	std	Y+9, r26	; 0x09
    251e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	2c f4       	brge	.+10     	; 0x2542 <GrantAccess+0x8c>
		__ticks = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	3f c0       	rjmp	.+126    	; 0x25c0 <GrantAccess+0x10a>
	else if (__tmp > 65535)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	4c f5       	brge	.+82     	; 0x25ac <GrantAccess+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	6b 85       	ldd	r22, Y+11	; 0x0b
    255c:	7c 85       	ldd	r23, Y+12	; 0x0c
    255e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2560:	9e 85       	ldd	r25, Y+14	; 0x0e
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <GrantAccess+0xec>
    2584:	89 e1       	ldi	r24, 0x19	; 25
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <GrantAccess+0xda>
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <GrantAccess+0xce>
    25aa:	14 c0       	rjmp	.+40     	; 0x25d4 <GrantAccess+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	6f 81       	ldd	r22, Y+7	; 0x07
    25ae:	78 85       	ldd	r23, Y+8	; 0x08
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <GrantAccess+0x116>
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5000);
    hLed_Off(GREEN_LED_PORT, GREEN_LED_PIN);
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	64 e0       	ldi	r22, 0x04	; 4
    25d8:	0e 94 33 0b 	call	0x1666	; 0x1666 <hLed_Off>
}
    25dc:	2e 96       	adiw	r28, 0x0e	; 14
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <DenyAccess>:

/*  Access Denied  */
void DenyAccess() {
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	2e 97       	sbiw	r28, 0x0e	; 14
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    hLCD_SendCommand(0x01);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    hLCD_MoveCursor(FirstLine, 1);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
    hLCD_SendString("Access Denied");
    2610:	80 e8       	ldi	r24, 0x80	; 128
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
    hLed_On(RED_LED_PORT, RED_LED_PIN);
    2618:	84 e0       	ldi	r24, 0x04	; 4
    261a:	65 e0       	ldi	r22, 0x05	; 5
    261c:	0e 94 22 0b 	call	0x1644	; 0x1644 <hLed_On>
    mUART_SendString("Access Denied");
    2620:	80 e8       	ldi	r24, 0x80	; 128
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <mUART_SendString>
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	aa ef       	ldi	r26, 0xFA	; 250
    262e:	b4 e4       	ldi	r27, 0x44	; 68
    2630:	8b 87       	std	Y+11, r24	; 0x0b
    2632:	9c 87       	std	Y+12, r25	; 0x0c
    2634:	ad 87       	std	Y+13, r26	; 0x0d
    2636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2638:	6b 85       	ldd	r22, Y+11	; 0x0b
    263a:	7c 85       	ldd	r23, Y+12	; 0x0c
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4a e7       	ldi	r20, 0x7A	; 122
    2646:	53 e4       	ldi	r21, 0x43	; 67
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8f 83       	std	Y+7, r24	; 0x07
    2652:	98 87       	std	Y+8, r25	; 0x08
    2654:	a9 87       	std	Y+9, r26	; 0x09
    2656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	2c f4       	brge	.+10     	; 0x267a <DenyAccess+0x8c>
		__ticks = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	3f c0       	rjmp	.+126    	; 0x26f8 <DenyAccess+0x10a>
	else if (__tmp > 65535)
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	4c f5       	brge	.+82     	; 0x26e4 <DenyAccess+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	6b 85       	ldd	r22, Y+11	; 0x0b
    2694:	7c 85       	ldd	r23, Y+12	; 0x0c
    2696:	8d 85       	ldd	r24, Y+13	; 0x0d
    2698:	9e 85       	ldd	r25, Y+14	; 0x0e
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <DenyAccess+0xec>
    26bc:	89 e1       	ldi	r24, 0x19	; 25
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <DenyAccess+0xda>
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <DenyAccess+0xce>
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <DenyAccess+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <DenyAccess+0x116>
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
    hLed_Off(RED_LED_PORT, RED_LED_PIN);
    270c:	84 e0       	ldi	r24, 0x04	; 4
    270e:	65 e0       	ldi	r22, 0x05	; 5
    2710:	0e 94 33 0b 	call	0x1666	; 0x1666 <hLed_Off>
}
    2714:	2e 96       	adiw	r28, 0x0e	; 14
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <LockSystem>:

/*  Lock the System  */
void LockSystem() {
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	2e 97       	sbiw	r28, 0x0e	; 14
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    hLCD_SendCommand(0x01);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    hLCD_MoveCursor(FirstLine, 1);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	61 e0       	ldi	r22, 0x01	; 1
    2744:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
    hLCD_SendString("System Locked");
    2748:	8e e8       	ldi	r24, 0x8E	; 142
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
    mUART_SendString("System Locked");
    2750:	8e e8       	ldi	r24, 0x8E	; 142
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <mUART_SendString>
    hLed_On(RED_LED_PORT, RED_LED_PIN);
    2758:	84 e0       	ldi	r24, 0x04	; 4
    275a:	65 e0       	ldi	r22, 0x05	; 5
    275c:	0e 94 22 0b 	call	0x1644	; 0x1644 <hLed_On>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e4       	ldi	r25, 0x40	; 64
    2764:	ac e1       	ldi	r26, 0x1C	; 28
    2766:	b6 e4       	ldi	r27, 0x46	; 70
    2768:	8b 87       	std	Y+11, r24	; 0x0b
    276a:	9c 87       	std	Y+12, r25	; 0x0c
    276c:	ad 87       	std	Y+13, r26	; 0x0d
    276e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	6b 85       	ldd	r22, Y+11	; 0x0b
    2772:	7c 85       	ldd	r23, Y+12	; 0x0c
    2774:	8d 85       	ldd	r24, Y+13	; 0x0d
    2776:	9e 85       	ldd	r25, Y+14	; 0x0e
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a e7       	ldi	r20, 0x7A	; 122
    277e:	53 e4       	ldi	r21, 0x43	; 67
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	8f 83       	std	Y+7, r24	; 0x07
    278a:	98 87       	std	Y+8, r25	; 0x08
    278c:	a9 87       	std	Y+9, r26	; 0x09
    278e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <LockSystem+0x8c>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9e 83       	std	Y+6, r25	; 0x06
    27ae:	8d 83       	std	Y+5, r24	; 0x05
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <LockSystem+0x10a>
	else if (__tmp > 65535)
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <LockSystem+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    27cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <LockSystem+0xec>
    27f4:	89 e1       	ldi	r24, 0x19	; 25
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LockSystem+0xda>
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <LockSystem+0xce>
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <LockSystem+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	6f 81       	ldd	r22, Y+7	; 0x07
    281e:	78 85       	ldd	r23, Y+8	; 0x08
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <LockSystem+0x116>
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(LOCK_TIME_MS);
    hLed_Off(RED_LED_PORT, RED_LED_PIN);
    2844:	84 e0       	ldi	r24, 0x04	; 4
    2846:	65 e0       	ldi	r22, 0x05	; 5
    2848:	0e 94 33 0b 	call	0x1666	; 0x1666 <hLed_Off>
}
    284c:	2e 96       	adiw	r28, 0x0e	; 14
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <WaitForAdmin>:

/*  Wait for Admin Button to Reset  */
void WaitForAdmin() {
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	2e 97       	sbiw	r28, 0x0e	; 14
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    hLCD_SendCommand(0x01);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    hLCD_MoveCursor(FirstLine, 1);
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	61 e0       	ldi	r22, 0x01	; 1
    287c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
    hLCD_SendString("Wait Admin Btn");
    2880:	8c e9       	ldi	r24, 0x9C	; 156
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
    while (mDIO_ReadValueFromPin(ADMIN_BUTTON_PORT, ADMIN_BUTTON_PIN) == DIO_Low);
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	63 e0       	ldi	r22, 0x03	; 3
    288c:	0e 94 2e 09 	call	0x125c	; 0x125c <mDIO_ReadValueFromPin>
    2890:	88 23       	and	r24, r24
    2892:	d1 f3       	breq	.-12     	; 0x2888 <WaitForAdmin+0x2a>
    hLCD_SendCommand(0x01);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    hLCD_MoveCursor(FirstLine, 1);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
    hLCD_SendString("System Reset");
    28a2:	8b ea       	ldi	r24, 0xAB	; 171
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	aa ef       	ldi	r26, 0xFA	; 250
    28b0:	b4 e4       	ldi	r27, 0x44	; 68
    28b2:	8b 87       	std	Y+11, r24	; 0x0b
    28b4:	9c 87       	std	Y+12, r25	; 0x0c
    28b6:	ad 87       	std	Y+13, r26	; 0x0d
    28b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    28bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28be:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	53 e4       	ldi	r21, 0x43	; 67
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8f 83       	std	Y+7, r24	; 0x07
    28d4:	98 87       	std	Y+8, r25	; 0x08
    28d6:	a9 87       	std	Y+9, r26	; 0x09
    28d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <WaitForAdmin+0x9e>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <WaitForAdmin+0x11c>
	else if (__tmp > 65535)
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <WaitForAdmin+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	6b 85       	ldd	r22, Y+11	; 0x0b
    2916:	7c 85       	ldd	r23, Y+12	; 0x0c
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	9e 85       	ldd	r25, Y+14	; 0x0e
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
    293c:	0f c0       	rjmp	.+30     	; 0x295c <WaitForAdmin+0xfe>
    293e:	89 e1       	ldi	r24, 0x19	; 25
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	8b 83       	std	Y+3, r24	; 0x03
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <WaitForAdmin+0xec>
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8d 81       	ldd	r24, Y+5	; 0x05
    2954:	9e 81       	ldd	r25, Y+6	; 0x06
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <WaitForAdmin+0xe0>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <WaitForAdmin+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <WaitForAdmin+0x128>
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2000);
    hLCD_SendCommand(0x01);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
    hLCD_MoveCursor(FirstLine, 1);
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
    hLCD_SendString("System Ready");
    299c:	80 e6       	ldi	r24, 0x60	; 96
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
}
    29a4:	2e 96       	adiw	r28, 0x0e	; 14
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <__vector_1>:

/*  ISR for Motion Detection (EXTI0)  */
void __vector_1(void) {
    29b6:	1f 92       	push	r1
    29b8:	0f 92       	push	r0
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	0f 92       	push	r0
    29be:	11 24       	eor	r1, r1
    29c0:	8f 93       	push	r24
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    motionDetected = 1;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	80 93 e5 00 	sts	0x00E5, r24
}
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	8f 91       	pop	r24
    29d6:	0f 90       	pop	r0
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	0f 90       	pop	r0
    29dc:	1f 90       	pop	r1
    29de:	18 95       	reti

000029e0 <mUART_SendString>:

/*  UART Send String (Helper)  */
void mUART_SendString(const char* str) {
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <mUART_SendString+0x6>
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	0d c0       	rjmp	.+26     	; 0x2a0a <mUART_SendString+0x2a>
    while (*str) {
        mUART_Send(*str++);
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	80 81       	ld	r24, Z
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	c9 01       	movw	r24, r18
    2a06:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <mUART_Send>
    motionDetected = 1;
}

/*  UART Send String (Helper)  */
void mUART_SendString(const char* str) {
    while (*str) {
    2a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0e:	80 81       	ld	r24, Z
    2a10:	88 23       	and	r24, r24
    2a12:	71 f7       	brne	.-36     	; 0x29f0 <mUART_SendString+0x10>
        mUART_Send(*str++);
    }
}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <main>:
/*  Global Variables  */
volatile uint8_t motionDetected = 1;
char storedPassword[PASSWORD_LENGTH + 1] = "1234";
uint8_t attemptCount = 0;

int main() {
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <main+0x6>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <main+0x8>
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    System_Init();
    2a2c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <System_Init>
    char enteredPassword[5];

    while (1) {
        if (motionDetected) {
    2a30:	80 91 e5 00 	lds	r24, 0x00E5
    2a34:	88 23       	and	r24, r24
    2a36:	e1 f3       	breq	.-8      	; 0x2a30 <main+0x12>
            motionDetected = 0;
    2a38:	10 92 e5 00 	sts	0x00E5, r1

            hLCD_SendCommand(0x01); // Clear LCD
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hLCD_SendCommand>
            hLCD_MoveCursor(FirstLine, 1);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
            hLCD_SendString("Enter Password:");
    2a4a:	88 eb       	ldi	r24, 0xB8	; 184
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <hLCD_SendString>
            hLCD_MoveCursor(SecondeLine, 1);
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	61 e0       	ldi	r22, 0x01	; 1
    2a56:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <hLCD_MoveCursor>
            EnterPassword(enteredPassword);
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	0e 94 93 11 	call	0x2326	; 0x2326 <EnterPassword>

            if (CheckPassword(enteredPassword)) {
    2a62:	ce 01       	movw	r24, r28
    2a64:	01 96       	adiw	r24, 0x01	; 1
    2a66:	0e 94 40 12 	call	0x2480	; 0x2480 <CheckPassword>
    2a6a:	88 23       	and	r24, r24
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <main+0x5a>
                GrantAccess();
    2a6e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <GrantAccess>
                attemptCount = 0;
    2a72:	10 92 f6 00 	sts	0x00F6, r1
    2a76:	dc cf       	rjmp	.-72     	; 0x2a30 <main+0x12>
            }
            else {
                attemptCount++;
    2a78:	80 91 f6 00 	lds	r24, 0x00F6
    2a7c:	8f 5f       	subi	r24, 0xFF	; 255
    2a7e:	80 93 f6 00 	sts	0x00F6, r24
                DenyAccess();
    2a82:	0e 94 f7 12 	call	0x25ee	; 0x25ee <DenyAccess>
                if (attemptCount >= MAX_ATTEMPTS) {
    2a86:	80 91 f6 00 	lds	r24, 0x00F6
    2a8a:	83 30       	cpi	r24, 0x03	; 3
    2a8c:	88 f2       	brcs	.-94     	; 0x2a30 <main+0x12>
                    LockSystem();
    2a8e:	0e 94 93 13 	call	0x2726	; 0x2726 <LockSystem>
                    WaitForAdmin();
    2a92:	0e 94 2f 14 	call	0x285e	; 0x285e <WaitForAdmin>
                    attemptCount = 0;
    2a96:	10 92 f6 00 	sts	0x00F6, r1
    2a9a:	ca cf       	rjmp	.-108    	; 0x2a30 <main+0x12>

00002a9c <__udivmodsi4>:
    2a9c:	a1 e2       	ldi	r26, 0x21	; 33
    2a9e:	1a 2e       	mov	r1, r26
    2aa0:	aa 1b       	sub	r26, r26
    2aa2:	bb 1b       	sub	r27, r27
    2aa4:	fd 01       	movw	r30, r26
    2aa6:	0d c0       	rjmp	.+26     	; 0x2ac2 <__udivmodsi4_ep>

00002aa8 <__udivmodsi4_loop>:
    2aa8:	aa 1f       	adc	r26, r26
    2aaa:	bb 1f       	adc	r27, r27
    2aac:	ee 1f       	adc	r30, r30
    2aae:	ff 1f       	adc	r31, r31
    2ab0:	a2 17       	cp	r26, r18
    2ab2:	b3 07       	cpc	r27, r19
    2ab4:	e4 07       	cpc	r30, r20
    2ab6:	f5 07       	cpc	r31, r21
    2ab8:	20 f0       	brcs	.+8      	; 0x2ac2 <__udivmodsi4_ep>
    2aba:	a2 1b       	sub	r26, r18
    2abc:	b3 0b       	sbc	r27, r19
    2abe:	e4 0b       	sbc	r30, r20
    2ac0:	f5 0b       	sbc	r31, r21

00002ac2 <__udivmodsi4_ep>:
    2ac2:	66 1f       	adc	r22, r22
    2ac4:	77 1f       	adc	r23, r23
    2ac6:	88 1f       	adc	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	1a 94       	dec	r1
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <__udivmodsi4_loop>
    2ace:	60 95       	com	r22
    2ad0:	70 95       	com	r23
    2ad2:	80 95       	com	r24
    2ad4:	90 95       	com	r25
    2ad6:	9b 01       	movw	r18, r22
    2ad8:	ac 01       	movw	r20, r24
    2ada:	bd 01       	movw	r22, r26
    2adc:	cf 01       	movw	r24, r30
    2ade:	08 95       	ret

00002ae0 <__prologue_saves__>:
    2ae0:	2f 92       	push	r2
    2ae2:	3f 92       	push	r3
    2ae4:	4f 92       	push	r4
    2ae6:	5f 92       	push	r5
    2ae8:	6f 92       	push	r6
    2aea:	7f 92       	push	r7
    2aec:	8f 92       	push	r8
    2aee:	9f 92       	push	r9
    2af0:	af 92       	push	r10
    2af2:	bf 92       	push	r11
    2af4:	cf 92       	push	r12
    2af6:	df 92       	push	r13
    2af8:	ef 92       	push	r14
    2afa:	ff 92       	push	r15
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	ca 1b       	sub	r28, r26
    2b0a:	db 0b       	sbc	r29, r27
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	09 94       	ijmp

00002b18 <__epilogue_restores__>:
    2b18:	2a 88       	ldd	r2, Y+18	; 0x12
    2b1a:	39 88       	ldd	r3, Y+17	; 0x11
    2b1c:	48 88       	ldd	r4, Y+16	; 0x10
    2b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b20:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b22:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b24:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b26:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b28:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b2a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b2c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b2e:	df 80       	ldd	r13, Y+7	; 0x07
    2b30:	ee 80       	ldd	r14, Y+6	; 0x06
    2b32:	fd 80       	ldd	r15, Y+5	; 0x05
    2b34:	0c 81       	ldd	r16, Y+4	; 0x04
    2b36:	1b 81       	ldd	r17, Y+3	; 0x03
    2b38:	aa 81       	ldd	r26, Y+2	; 0x02
    2b3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b3c:	ce 0f       	add	r28, r30
    2b3e:	d1 1d       	adc	r29, r1
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	ed 01       	movw	r28, r26
    2b4c:	08 95       	ret

00002b4e <strcmp>:
    2b4e:	fb 01       	movw	r30, r22
    2b50:	dc 01       	movw	r26, r24
    2b52:	8d 91       	ld	r24, X+
    2b54:	01 90       	ld	r0, Z+
    2b56:	80 19       	sub	r24, r0
    2b58:	01 10       	cpse	r0, r1
    2b5a:	d9 f3       	breq	.-10     	; 0x2b52 <strcmp+0x4>
    2b5c:	99 0b       	sbc	r25, r25
    2b5e:	08 95       	ret

00002b60 <_exit>:
    2b60:	f8 94       	cli

00002b62 <__stop_program>:
    2b62:	ff cf       	rjmp	.-2      	; 0x2b62 <__stop_program>
