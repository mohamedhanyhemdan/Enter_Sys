
Enter_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001e2a  00001e9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ce0  00000000  00000000  00001eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f6a  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000069f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000078de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000868c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000087ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009247  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <main>
      7a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <mSPI_SlaveInit>:



#elif SPI_SelectMode==SlaveMode
void mSPI_SlaveInit()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
    ClearBit(SPCR_Reg, SPIE_Bit);
     b3e:	ad e2       	ldi	r26, 0x2D	; 45
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ed e2       	ldi	r30, 0x2D	; 45
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	8c 93       	st	X, r24
    ClearBit(SPCR_Reg, MSTR_Bit);
     b4c:	ad e2       	ldi	r26, 0x2D	; 45
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	ed e2       	ldi	r30, 0x2D	; 45
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 7e       	andi	r24, 0xEF	; 239
     b58:	8c 93       	st	X, r24
    {
        ClearBit(SPCR_Reg, DORD_Bit);
    }
    else if (SPI_DataOrder == SendLSB_First)
    {
        SetBit(SPCR_Reg, DORD_Bit);
     b5a:	ad e2       	ldi	r26, 0x2D	; 45
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ed e2       	ldi	r30, 0x2D	; 45
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	8c 93       	st	X, r24
    }
    //cpl
    if (SPI_ClkPOL == IdelLow)
    {
        ClearBit(SPCR_Reg, CPOL_Bit);
     b68:	ad e2       	ldi	r26, 0x2D	; 45
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ed e2       	ldi	r30, 0x2D	; 45
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	8c 93       	st	X, r24
    {
        ClearBit(SPCR_Reg, CPHA_Bit);
    }
    else if (SPI_ClkPHA == MasterTxFirst)
    {
        SetBit(SPCR_Reg, CPHA_Bit);
     b76:	ad e2       	ldi	r26, 0x2D	; 45
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ed e2       	ldi	r30, 0x2D	; 45
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	84 60       	ori	r24, 0x04	; 4
     b82:	8c 93       	st	X, r24
    }
    DDRB_Reg |= (1 << 6);
     b84:	a7 e3       	ldi	r26, 0x37	; 55
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e7 e3       	ldi	r30, 0x37	; 55
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	8c 93       	st	X, r24

    SetBit(SPCR_Reg, SPE_Bit);
     b92:	ad e2       	ldi	r26, 0x2D	; 45
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ed e2       	ldi	r30, 0x2D	; 45
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 64       	ori	r24, 0x40	; 64
     b9e:	8c 93       	st	X, r24
}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <mSPI_SlaveTrnsiever>:


uint8_t mSPI_SlaveTrnsiever(uint8_t Data)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	0f 92       	push	r0
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	89 83       	std	Y+1, r24	; 0x01
	SPDR_Reg = Data;
     bb2:	ef e2       	ldi	r30, 0x2F	; 47
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	80 83       	st	Z, r24
	while (GetBit(SPSR_Reg, SPIF_Bit) == 0);
     bba:	ee e2       	ldi	r30, 0x2E	; 46
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 23       	and	r24, r24
     bc2:	dc f7       	brge	.-10     	; 0xbba <mSPI_SlaveTrnsiever+0x14>
	return SPDR_Reg;
     bc4:	ef e2       	ldi	r30, 0x2F	; 47
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z

}
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <mEXTI0_Enable>:
#include "../../../Inc/MCAL/EXTI/EXTI_Interface.h"
#include "../../../Inc/Common/Macros.h"


void mEXTI0_Enable(uint8_t SensControl)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	89 83       	std	Y+1, r24	; 0x01

}
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <mEXTI1_Enable>:

void mEXTI1_Enable(uint8_t SensControl)
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	89 83       	std	Y+1, r24	; 0x01

}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <mEXTI2_Enable>:

void mEXTI2_Enable(uint8_t SensControl)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	0f 92       	push	r0
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	89 83       	std	Y+1, r24	; 0x01
//	 * 				Bit 6 in MCUCSR Register must be 0
//	 * 			if SensControl == 3
//	 * 				Bit 6 in MCUCSR Register must be 1
//	 * 		2- Enable the SIE For EXTI2
//	 * 			Bit 5 in GICR Resister  must be One
	if(SensControl==EXTI_Falling)
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	41 f4       	brne	.+16     	; 0xc1c <mEXTI2_Enable+0x22>
	{
		ClearBit(MCUCSR_Reg,EXTI_ISC2);
     c0c:	a4 e5       	ldi	r26, 0x54	; 84
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e4 e5       	ldi	r30, 0x54	; 84
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8f 7b       	andi	r24, 0xBF	; 191
     c18:	8c 93       	st	X, r24
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <mEXTI2_Enable+0x36>
	}
	else if (SensControl==EXTI_Rising)
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	83 30       	cpi	r24, 0x03	; 3
     c20:	39 f4       	brne	.+14     	; 0xc30 <mEXTI2_Enable+0x36>
	{
		SetBit(MCUCSR_Reg,EXTI_ISC2);
     c22:	a4 e5       	ldi	r26, 0x54	; 84
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e4 e5       	ldi	r30, 0x54	; 84
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	80 64       	ori	r24, 0x40	; 64
     c2e:	8c 93       	st	X, r24
	}
	else
	{
		// Not Vaild Options
	}
	SetBit(GICR_Reg,EXTI_INT2);
     c30:	ab e5       	ldi	r26, 0x5B	; 91
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	eb e5       	ldi	r30, 0x5B	; 91
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	80 62       	ori	r24, 0x20	; 32
     c3c:	8c 93       	st	X, r24
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <mDIO_ChangeDirectionForPin>:
#include "../../../INC/Common/Macros.h"

#include "../../../Inc/MCAL/NTI_Atmega32Reg.h"

void mDIO_ChangeDirectionForPin(uint8_t GroupName , uint8_t PinNumber , uint8_t DirectionState)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	27 97       	sbiw	r28, 0x07	; 7
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6a 83       	std	Y+2, r22	; 0x02
     c5e:	4b 83       	std	Y+3, r20	; 0x03
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	08 f0       	brcs	.+2      	; 0xc68 <mDIO_ChangeDirectionForPin+0x22>
     c66:	ec c0       	rjmp	.+472    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
	{
		if (DirectionState==DIO_Output)
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <mDIO_ChangeDirectionForPin+0x2a>
     c6e:	70 c0       	rjmp	.+224    	; 0xd50 <mDIO_ChangeDirectionForPin+0x10a>
		{
			switch(GroupName)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	3f 83       	std	Y+7, r19	; 0x07
     c78:	2e 83       	std	Y+6, r18	; 0x06
     c7a:	8e 81       	ldd	r24, Y+6	; 0x06
     c7c:	9f 81       	ldd	r25, Y+7	; 0x07
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	91 05       	cpc	r25, r1
     c82:	51 f1       	breq	.+84     	; 0xcd8 <mDIO_ChangeDirectionForPin+0x92>
     c84:	2e 81       	ldd	r18, Y+6	; 0x06
     c86:	3f 81       	ldd	r19, Y+7	; 0x07
     c88:	23 30       	cpi	r18, 0x03	; 3
     c8a:	31 05       	cpc	r19, r1
     c8c:	34 f4       	brge	.+12     	; 0xc9a <mDIO_ChangeDirectionForPin+0x54>
     c8e:	8e 81       	ldd	r24, Y+6	; 0x06
     c90:	9f 81       	ldd	r25, Y+7	; 0x07
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	91 05       	cpc	r25, r1
     c96:	61 f0       	breq	.+24     	; 0xcb0 <mDIO_ChangeDirectionForPin+0x6a>
     c98:	d3 c0       	rjmp	.+422    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
     c9a:	2e 81       	ldd	r18, Y+6	; 0x06
     c9c:	3f 81       	ldd	r19, Y+7	; 0x07
     c9e:	23 30       	cpi	r18, 0x03	; 3
     ca0:	31 05       	cpc	r19, r1
     ca2:	71 f1       	breq	.+92     	; 0xd00 <mDIO_ChangeDirectionForPin+0xba>
     ca4:	8e 81       	ldd	r24, Y+6	; 0x06
     ca6:	9f 81       	ldd	r25, Y+7	; 0x07
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	91 05       	cpc	r25, r1
     cac:	e9 f1       	breq	.+122    	; 0xd28 <mDIO_ChangeDirectionForPin+0xe2>
     cae:	c8 c0       	rjmp	.+400    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			{
			case GroupA: SetBit(DDRA_Reg,PinNumber);break;
     cb0:	aa e3       	ldi	r26, 0x3A	; 58
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	ea e3       	ldi	r30, 0x3A	; 58
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <mDIO_ChangeDirectionForPin+0x88>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <mDIO_ChangeDirectionForPin+0x84>
     cd2:	84 2b       	or	r24, r20
     cd4:	8c 93       	st	X, r24
     cd6:	b4 c0       	rjmp	.+360    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupB: SetBit(DDRB_Reg,PinNumber);break;
     cd8:	a7 e3       	ldi	r26, 0x37	; 55
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e7 e3       	ldi	r30, 0x37	; 55
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <mDIO_ChangeDirectionForPin+0xb0>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <mDIO_ChangeDirectionForPin+0xac>
     cfa:	84 2b       	or	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	a0 c0       	rjmp	.+320    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupC: SetBit(DDRC_Reg,PinNumber);break;
     d00:	a4 e3       	ldi	r26, 0x34	; 52
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e4 e3       	ldi	r30, 0x34	; 52
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <mDIO_ChangeDirectionForPin+0xd8>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <mDIO_ChangeDirectionForPin+0xd4>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	8c c0       	rjmp	.+280    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupD: SetBit(DDRD_Reg,PinNumber);break;
     d28:	a1 e3       	ldi	r26, 0x31	; 49
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e1 e3       	ldi	r30, 0x31	; 49
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <mDIO_ChangeDirectionForPin+0x100>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <mDIO_ChangeDirectionForPin+0xfc>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	78 c0       	rjmp	.+240    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			default :  // GroupName Outof Rang
				break;
			}
		}
		else if (DirectionState==DIO_Input)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <mDIO_ChangeDirectionForPin+0x112>
     d56:	74 c0       	rjmp	.+232    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
		{
			switch(GroupName)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3d 83       	std	Y+5, r19	; 0x05
     d60:	2c 83       	std	Y+4, r18	; 0x04
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	91 05       	cpc	r25, r1
     d6a:	61 f1       	breq	.+88     	; 0xdc4 <mDIO_ChangeDirectionForPin+0x17e>
     d6c:	2c 81       	ldd	r18, Y+4	; 0x04
     d6e:	3d 81       	ldd	r19, Y+5	; 0x05
     d70:	23 30       	cpi	r18, 0x03	; 3
     d72:	31 05       	cpc	r19, r1
     d74:	34 f4       	brge	.+12     	; 0xd82 <mDIO_ChangeDirectionForPin+0x13c>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	91 05       	cpc	r25, r1
     d7e:	69 f0       	breq	.+26     	; 0xd9a <mDIO_ChangeDirectionForPin+0x154>
     d80:	5f c0       	rjmp	.+190    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	23 30       	cpi	r18, 0x03	; 3
     d88:	31 05       	cpc	r19, r1
     d8a:	89 f1       	breq	.+98     	; 0xdee <mDIO_ChangeDirectionForPin+0x1a8>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	84 30       	cpi	r24, 0x04	; 4
     d92:	91 05       	cpc	r25, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <mDIO_ChangeDirectionForPin+0x152>
     d96:	40 c0       	rjmp	.+128    	; 0xe18 <mDIO_ChangeDirectionForPin+0x1d2>
     d98:	53 c0       	rjmp	.+166    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			{
			case GroupA: ClearBit(DDRA_Reg ,PinNumber);break;
     d9a:	aa e3       	ldi	r26, 0x3A	; 58
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e3       	ldi	r30, 0x3A	; 58
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <mDIO_ChangeDirectionForPin+0x172>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <mDIO_ChangeDirectionForPin+0x16e>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	3e c0       	rjmp	.+124    	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupB: ClearBit(DDRB_Reg,PinNumber);break;
     dc4:	a7 e3       	ldi	r26, 0x37	; 55
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 e3       	ldi	r30, 0x37	; 55
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <mDIO_ChangeDirectionForPin+0x19c>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <mDIO_ChangeDirectionForPin+0x198>
     de6:	80 95       	com	r24
     de8:	84 23       	and	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	29 c0       	rjmp	.+82     	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupC: ClearBit(DDRC_Reg,PinNumber);break;
     dee:	a4 e3       	ldi	r26, 0x34	; 52
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e4 e3       	ldi	r30, 0x34	; 52
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <mDIO_ChangeDirectionForPin+0x1c6>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <mDIO_ChangeDirectionForPin+0x1c2>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <mDIO_ChangeDirectionForPin+0x1fa>
			case GroupD: ClearBit(DDRD_Reg,PinNumber);break;
     e18:	a1 e3       	ldi	r26, 0x31	; 49
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <mDIO_ChangeDirectionForPin+0x1f0>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <mDIO_ChangeDirectionForPin+0x1ec>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
	else
	{
		// Pin Number Outof Range
	}

}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <mDIO_WriteValueForPin>:
void mDIO_WriteValueForPin(uint8_t GroupName ,  uint8_t PinNumber , uint8_t OutputType)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	27 97       	sbiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	6a 83       	std	Y+2, r22	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03

	if(PinNumber>= Pin0 && PinNumber <=Pin7)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	08 f0       	brcs	.+2      	; 0xe74 <mDIO_WriteValueForPin+0x22>
     e72:	ec c0       	rjmp	.+472    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
	{
		if (OutputType==DIO_Output)
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <mDIO_WriteValueForPin+0x2a>
     e7a:	70 c0       	rjmp	.+224    	; 0xf5c <mDIO_WriteValueForPin+0x10a>
		{
			switch(GroupName)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3f 83       	std	Y+7, r19	; 0x07
     e84:	2e 83       	std	Y+6, r18	; 0x06
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	91 05       	cpc	r25, r1
     e8e:	51 f1       	breq	.+84     	; 0xee4 <mDIO_WriteValueForPin+0x92>
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	23 30       	cpi	r18, 0x03	; 3
     e96:	31 05       	cpc	r19, r1
     e98:	34 f4       	brge	.+12     	; 0xea6 <mDIO_WriteValueForPin+0x54>
     e9a:	8e 81       	ldd	r24, Y+6	; 0x06
     e9c:	9f 81       	ldd	r25, Y+7	; 0x07
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	91 05       	cpc	r25, r1
     ea2:	61 f0       	breq	.+24     	; 0xebc <mDIO_WriteValueForPin+0x6a>
     ea4:	d3 c0       	rjmp	.+422    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
     ea6:	2e 81       	ldd	r18, Y+6	; 0x06
     ea8:	3f 81       	ldd	r19, Y+7	; 0x07
     eaa:	23 30       	cpi	r18, 0x03	; 3
     eac:	31 05       	cpc	r19, r1
     eae:	71 f1       	breq	.+92     	; 0xf0c <mDIO_WriteValueForPin+0xba>
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	84 30       	cpi	r24, 0x04	; 4
     eb6:	91 05       	cpc	r25, r1
     eb8:	e9 f1       	breq	.+122    	; 0xf34 <mDIO_WriteValueForPin+0xe2>
     eba:	c8 c0       	rjmp	.+400    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			{
			case GroupA: SetBit(PORTA_Reg,PinNumber);break;
     ebc:	ab e3       	ldi	r26, 0x3B	; 59
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	eb e3       	ldi	r30, 0x3B	; 59
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <mDIO_WriteValueForPin+0x88>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <mDIO_WriteValueForPin+0x84>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	b4 c0       	rjmp	.+360    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			case GroupB: SetBit(PORTB_Reg,PinNumber);break;
     ee4:	a8 e3       	ldi	r26, 0x38	; 56
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e3       	ldi	r30, 0x38	; 56
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <mDIO_WriteValueForPin+0xb0>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <mDIO_WriteValueForPin+0xac>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	a0 c0       	rjmp	.+320    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			case GroupC: SetBit(PORTC_Reg,PinNumber);break;
     f0c:	a5 e3       	ldi	r26, 0x35	; 53
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e5 e3       	ldi	r30, 0x35	; 53
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <mDIO_WriteValueForPin+0xd8>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <mDIO_WriteValueForPin+0xd4>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	8c c0       	rjmp	.+280    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			case GroupD: SetBit(PORTD_Reg,PinNumber);break;
     f34:	a2 e3       	ldi	r26, 0x32	; 50
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e2 e3       	ldi	r30, 0x32	; 50
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <mDIO_WriteValueForPin+0x100>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <mDIO_WriteValueForPin+0xfc>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	78 c0       	rjmp	.+240    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			default :  // GroupName Outof Rang
				break;
			}
		}
		else if (OutputType==DIO_Input)
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 23       	and	r24, r24
     f60:	09 f0       	breq	.+2      	; 0xf64 <mDIO_WriteValueForPin+0x112>
     f62:	74 c0       	rjmp	.+232    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
		{
			switch(GroupName)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3d 83       	std	Y+5, r19	; 0x05
     f6c:	2c 83       	std	Y+4, r18	; 0x04
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	61 f1       	breq	.+88     	; 0xfd0 <mDIO_WriteValueForPin+0x17e>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	23 30       	cpi	r18, 0x03	; 3
     f7e:	31 05       	cpc	r19, r1
     f80:	34 f4       	brge	.+12     	; 0xf8e <mDIO_WriteValueForPin+0x13c>
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <mDIO_WriteValueForPin+0x154>
     f8c:	5f c0       	rjmp	.+190    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
     f8e:	2c 81       	ldd	r18, Y+4	; 0x04
     f90:	3d 81       	ldd	r19, Y+5	; 0x05
     f92:	23 30       	cpi	r18, 0x03	; 3
     f94:	31 05       	cpc	r19, r1
     f96:	89 f1       	breq	.+98     	; 0xffa <mDIO_WriteValueForPin+0x1a8>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	84 30       	cpi	r24, 0x04	; 4
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <mDIO_WriteValueForPin+0x152>
     fa2:	40 c0       	rjmp	.+128    	; 0x1024 <mDIO_WriteValueForPin+0x1d2>
     fa4:	53 c0       	rjmp	.+166    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			{
			case GroupA: ClearBit(PORTA_Reg ,PinNumber);break;
     fa6:	ab e3       	ldi	r26, 0x3B	; 59
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	eb e3       	ldi	r30, 0x3B	; 59
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <mDIO_WriteValueForPin+0x172>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <mDIO_WriteValueForPin+0x16e>
     fc8:	80 95       	com	r24
     fca:	84 23       	and	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	3e c0       	rjmp	.+124    	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			case GroupB: ClearBit(PORTB_Reg,PinNumber);break;
     fd0:	a8 e3       	ldi	r26, 0x38	; 56
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <mDIO_WriteValueForPin+0x19c>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <mDIO_WriteValueForPin+0x198>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	29 c0       	rjmp	.+82     	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			case GroupC: ClearBit(PORTC_Reg,PinNumber);break;
     ffa:	a5 e3       	ldi	r26, 0x35	; 53
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e3       	ldi	r30, 0x35	; 53
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <mDIO_WriteValueForPin+0x1c6>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <mDIO_WriteValueForPin+0x1c2>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	14 c0       	rjmp	.+40     	; 0x104c <mDIO_WriteValueForPin+0x1fa>
			case GroupD: ClearBit(PORTD_Reg,PinNumber);break;
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <mDIO_WriteValueForPin+0x1f0>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <mDIO_WriteValueForPin+0x1ec>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
	}
	else
	{
		// Pin Number Outof Range
	}
}
    104c:	27 96       	adiw	r28, 0x07	; 7
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <mDIO_ReadValueFromPin>:
uint8_t mDIO_ReadValueFromPin(uint8_t  GroupName, uint8_t PinNumber)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <mDIO_ReadValueFromPin+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <mDIO_ReadValueFromPin+0x8>
    1066:	0f 92       	push	r0
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t InputValue ;
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	08 f0       	brcs	.+2      	; 0x1078 <mDIO_ReadValueFromPin+0x1a>
    1076:	67 c0       	rjmp	.+206    	; 0x1146 <mDIO_ReadValueFromPin+0xe8>
	{
		switch(GroupName)
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3d 83       	std	Y+5, r19	; 0x05
    1080:	2c 83       	std	Y+4, r18	; 0x04
    1082:	4c 81       	ldd	r20, Y+4	; 0x04
    1084:	5d 81       	ldd	r21, Y+5	; 0x05
    1086:	42 30       	cpi	r20, 0x02	; 2
    1088:	51 05       	cpc	r21, r1
    108a:	41 f1       	breq	.+80     	; 0x10dc <mDIO_ReadValueFromPin+0x7e>
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	9d 81       	ldd	r25, Y+5	; 0x05
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	34 f4       	brge	.+12     	; 0x10a2 <mDIO_ReadValueFromPin+0x44>
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	21 30       	cpi	r18, 0x01	; 1
    109c:	31 05       	cpc	r19, r1
    109e:	61 f0       	breq	.+24     	; 0x10b8 <mDIO_ReadValueFromPin+0x5a>
    10a0:	52 c0       	rjmp	.+164    	; 0x1146 <mDIO_ReadValueFromPin+0xe8>
    10a2:	4c 81       	ldd	r20, Y+4	; 0x04
    10a4:	5d 81       	ldd	r21, Y+5	; 0x05
    10a6:	43 30       	cpi	r20, 0x03	; 3
    10a8:	51 05       	cpc	r21, r1
    10aa:	51 f1       	breq	.+84     	; 0x1100 <mDIO_ReadValueFromPin+0xa2>
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	9d 81       	ldd	r25, Y+5	; 0x05
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	91 05       	cpc	r25, r1
    10b4:	b9 f1       	breq	.+110    	; 0x1124 <mDIO_ReadValueFromPin+0xc6>
    10b6:	47 c0       	rjmp	.+142    	; 0x1146 <mDIO_ReadValueFromPin+0xe8>
		{
		case GroupA:InputValue=GetBit(PINA_Reg ,PinNumber);break;
    10b8:	e9 e3       	ldi	r30, 0x39	; 57
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a9 01       	movw	r20, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <mDIO_ReadValueFromPin+0x72>
    10cc:	55 95       	asr	r21
    10ce:	47 95       	ror	r20
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <mDIO_ReadValueFromPin+0x6e>
    10d4:	ca 01       	movw	r24, r20
    10d6:	81 70       	andi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	35 c0       	rjmp	.+106    	; 0x1146 <mDIO_ReadValueFromPin+0xe8>
		case GroupB:InputValue=GetBit(PINB_Reg,PinNumber);break;
    10dc:	e6 e3       	ldi	r30, 0x36	; 54
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <mDIO_ReadValueFromPin+0x96>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <mDIO_ReadValueFromPin+0x92>
    10f8:	ca 01       	movw	r24, r20
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	23 c0       	rjmp	.+70     	; 0x1146 <mDIO_ReadValueFromPin+0xe8>
		case GroupC:InputValue=GetBit(PINC_Reg,PinNumber);break;
    1100:	e3 e3       	ldi	r30, 0x33	; 51
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <mDIO_ReadValueFromPin+0xba>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <mDIO_ReadValueFromPin+0xb6>
    111c:	ca 01       	movw	r24, r20
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <mDIO_ReadValueFromPin+0xe8>
		case GroupD:InputValue=GetBit(PIND_Reg,PinNumber);break;
    1124:	e0 e3       	ldi	r30, 0x30	; 48
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a9 01       	movw	r20, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <mDIO_ReadValueFromPin+0xde>
    1138:	55 95       	asr	r21
    113a:	47 95       	ror	r20
    113c:	8a 95       	dec	r24
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <mDIO_ReadValueFromPin+0xda>
    1140:	ca 01       	movw	r24, r20
    1142:	81 70       	andi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01
		default :
			break;
		}
	}
	return  InputValue;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <mDIO_ChangeDirectionforGroup>:



void mDIO_ChangeDirectionforGroup(uint8_t GroupName , uint8_t DirecationValue)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <mDIO_ChangeDirectionforGroup+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <mDIO_ChangeDirectionforGroup+0x8>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	6a 83       	std	Y+2, r22	; 0x02

	if(DirecationValue>=0x00 && DirecationValue<=0xFF)
	{
		switch(GroupName)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3c 83       	std	Y+4, r19	; 0x04
    1170:	2b 83       	std	Y+3, r18	; 0x03
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	91 05       	cpc	r25, r1
    117a:	d9 f0       	breq	.+54     	; 0x11b2 <mDIO_ChangeDirectionforGroup+0x5a>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	23 30       	cpi	r18, 0x03	; 3
    1182:	31 05       	cpc	r19, r1
    1184:	34 f4       	brge	.+12     	; 0x1192 <mDIO_ChangeDirectionforGroup+0x3a>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	61 f0       	breq	.+24     	; 0x11a8 <mDIO_ChangeDirectionforGroup+0x50>
    1190:	1e c0       	rjmp	.+60     	; 0x11ce <mDIO_ChangeDirectionforGroup+0x76>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	3c 81       	ldd	r19, Y+4	; 0x04
    1196:	23 30       	cpi	r18, 0x03	; 3
    1198:	31 05       	cpc	r19, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <mDIO_ChangeDirectionforGroup+0x64>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	91 05       	cpc	r25, r1
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <mDIO_ChangeDirectionforGroup+0x6e>
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <mDIO_ChangeDirectionforGroup+0x76>
		{
		case GroupA: DDRA_Reg=DirecationValue;break;
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
    11b0:	0e c0       	rjmp	.+28     	; 0x11ce <mDIO_ChangeDirectionforGroup+0x76>
		case GroupB: DDRB_Reg=DirecationValue;break;
    11b2:	e7 e3       	ldi	r30, 0x37	; 55
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <mDIO_ChangeDirectionforGroup+0x76>
		case GroupC: DDRC_Reg=DirecationValue;break;
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <mDIO_ChangeDirectionforGroup+0x76>
		case GroupD: DDRD_Reg=DirecationValue;break;
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
	{
		// Output value out of Range
	}


}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <mDIO_WriteValueForGroup>:
void mDIO_WriteValueForGroup(uint8_t GroupName ,  uint8_t OutputValue)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <mDIO_WriteValueForGroup+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <mDIO_WriteValueForGroup+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
	if(OutputValue>=0x00 && OutputValue<=0xFF)
	{
		switch(GroupName)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	91 05       	cpc	r25, r1
    11fe:	d9 f0       	breq	.+54     	; 0x1236 <mDIO_WriteValueForGroup+0x5a>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	23 30       	cpi	r18, 0x03	; 3
    1206:	31 05       	cpc	r19, r1
    1208:	34 f4       	brge	.+12     	; 0x1216 <mDIO_WriteValueForGroup+0x3a>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	61 f0       	breq	.+24     	; 0x122c <mDIO_WriteValueForGroup+0x50>
    1214:	1e c0       	rjmp	.+60     	; 0x1252 <mDIO_WriteValueForGroup+0x76>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	23 30       	cpi	r18, 0x03	; 3
    121c:	31 05       	cpc	r19, r1
    121e:	81 f0       	breq	.+32     	; 0x1240 <mDIO_WriteValueForGroup+0x64>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	84 30       	cpi	r24, 0x04	; 4
    1226:	91 05       	cpc	r25, r1
    1228:	81 f0       	breq	.+32     	; 0x124a <mDIO_WriteValueForGroup+0x6e>
    122a:	13 c0       	rjmp	.+38     	; 0x1252 <mDIO_WriteValueForGroup+0x76>
		{
		case GroupA: PORTA_Reg=OutputValue;break;
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <mDIO_WriteValueForGroup+0x76>
		case GroupB: PORTB_Reg=OutputValue;break;
    1236:	e8 e3       	ldi	r30, 0x38	; 56
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <mDIO_WriteValueForGroup+0x76>
		case GroupC: PORTC_Reg=OutputValue;break;
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <mDIO_WriteValueForGroup+0x76>
		case GroupD: PORTD_Reg=OutputValue;break;
    124a:	e2 e3       	ldi	r30, 0x32	; 50
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
	else
	{
		// Output value out of Range
	}

}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <mDIO_ReadValueFromGroup>:
uint8_t mDIO_ReadValueFromGroup(uint8_t  GroupName)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <mDIO_ReadValueFromGroup+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <mDIO_ReadValueFromGroup+0x8>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	8a 83       	std	Y+2, r24	; 0x02
	// Task 5
	// Task3
	uint8_t InputValue ;
	switch(GroupName)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3c 83       	std	Y+4, r19	; 0x04
    1276:	2b 83       	std	Y+3, r18	; 0x03
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	91 05       	cpc	r25, r1
    1280:	d9 f0       	breq	.+54     	; 0x12b8 <mDIO_ReadValueFromGroup+0x58>
    1282:	2b 81       	ldd	r18, Y+3	; 0x03
    1284:	3c 81       	ldd	r19, Y+4	; 0x04
    1286:	23 30       	cpi	r18, 0x03	; 3
    1288:	31 05       	cpc	r19, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <mDIO_ReadValueFromGroup+0x38>
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	61 f0       	breq	.+24     	; 0x12ae <mDIO_ReadValueFromGroup+0x4e>
    1296:	1e c0       	rjmp	.+60     	; 0x12d4 <mDIO_ReadValueFromGroup+0x74>
    1298:	2b 81       	ldd	r18, Y+3	; 0x03
    129a:	3c 81       	ldd	r19, Y+4	; 0x04
    129c:	23 30       	cpi	r18, 0x03	; 3
    129e:	31 05       	cpc	r19, r1
    12a0:	81 f0       	breq	.+32     	; 0x12c2 <mDIO_ReadValueFromGroup+0x62>
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	91 05       	cpc	r25, r1
    12aa:	81 f0       	breq	.+32     	; 0x12cc <mDIO_ReadValueFromGroup+0x6c>
    12ac:	13 c0       	rjmp	.+38     	; 0x12d4 <mDIO_ReadValueFromGroup+0x74>
	{
	case GroupA:InputValue=PINA_Reg;break;
    12ae:	e9 e3       	ldi	r30, 0x39	; 57
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <mDIO_ReadValueFromGroup+0x74>
	case GroupB:InputValue=PINB_Reg;break;
    12b8:	e6 e3       	ldi	r30, 0x36	; 54
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <mDIO_ReadValueFromGroup+0x74>
	case GroupC:InputValue=PINC_Reg;break;
    12c2:	e3 e3       	ldi	r30, 0x33	; 51
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <mDIO_ReadValueFromGroup+0x74>
	case GroupD:InputValue=PIND_Reg;break;
    12cc:	e0 e3       	ldi	r30, 0x30	; 48
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	89 83       	std	Y+1, r24	; 0x01
	default :  // GroupName Outof Rang
		break;
	}
	return InputValue;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01

}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <mADC_Init>:
 *4- Right Adjust
 *4- Seclect Prescaller / 8
 *5- Enable ADC
 *-  */
void mADC_Init()
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	/* No Interrupt
		1- ADIE in ADCSRA  Must be Zero
	*/
	ClearBit(ADCSRA_Reg,ADIE_Bit);
    12ec:	a6 e2       	ldi	r26, 0x26	; 38
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e6 e2       	ldi	r30, 0x26	; 38
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	87 7f       	andi	r24, 0xF7	; 247
    12f8:	8c 93       	st	X, r24
	/*
	 * Single Mode Conversion
	 * 1- ADATE in ADCSRA Must be Zero */
	ClearBit(ADCSRA_Reg,ADATE_Bit);
    12fa:	a6 e2       	ldi	r26, 0x26	; 38
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e6 e2       	ldi	r30, 0x26	; 38
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7d       	andi	r24, 0xDF	; 223
    1306:	8c 93       	st	X, r24
	/*
	 * Aref == AVCC
	 * 1- REFS1 in ADMUX Must be 0
	 * 2- REFS0 in ADMUX Must be 1
	 * */
	ClearBit(ADMUX_Reg,REFS1_Bit);
    1308:	a7 e2       	ldi	r26, 0x27	; 39
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e7 e2       	ldi	r30, 0x27	; 39
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 77       	andi	r24, 0x7F	; 127
    1314:	8c 93       	st	X, r24
	SetBit(ADMUX_Reg,REFS0_Bit);
    1316:	a7 e2       	ldi	r26, 0x27	; 39
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e7 e2       	ldi	r30, 0x27	; 39
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 64       	ori	r24, 0x40	; 64
    1322:	8c 93       	st	X, r24
	/*
	 *Right Adjust
	 *ADLAR in ADMUX Must be 0  */
	ClearBit(ADMUX_Reg,ADLAR_Bit);
    1324:	a7 e2       	ldi	r26, 0x27	; 39
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e7 e2       	ldi	r30, 0x27	; 39
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8f 7d       	andi	r24, 0xDF	; 223
    1330:	8c 93       	st	X, r24
	/*Prescaller =  8
	 * 1- ADPS0 in ADCSRA Must be  1
	 * 2- ADPS1 in ADCSRA Must be  1
	 * 1- ADPS2 in ADCSRA Must be  0
	 * */
	SetBit(ADCSRA_Reg,ADPS0_Bit);
    1332:	a6 e2       	ldi	r26, 0x26	; 38
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e6 e2       	ldi	r30, 0x26	; 38
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	81 60       	ori	r24, 0x01	; 1
    133e:	8c 93       	st	X, r24
	SetBit(ADCSRA_Reg,ADPS1_Bit);
    1340:	a6 e2       	ldi	r26, 0x26	; 38
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e6 e2       	ldi	r30, 0x26	; 38
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	8c 93       	st	X, r24
	ClearBit(ADCSRA_Reg,ADPS2_Bit);
    134e:	a6 e2       	ldi	r26, 0x26	; 38
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e6 e2       	ldi	r30, 0x26	; 38
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8b 7f       	andi	r24, 0xFB	; 251
    135a:	8c 93       	st	X, r24
	/*
	 * ADC Enbale
	 * 1- ADEN in ADCSRA Must be 1 */
	SetBit(ADCSRA_Reg,ADEN_Bit);
    135c:	a6 e2       	ldi	r26, 0x26	; 38
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e6 e2       	ldi	r30, 0x26	; 38
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 68       	ori	r24, 0x80	; 128
    1368:	8c 93       	st	X, r24
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <mADC_SignleEndedConversion>:

//mADC_SignleEndedConversion(5);
//mADC_SignleEndedConversion(7);

uint16_t mADC_SignleEndedConversion(uint8_t Channel)// 0 - 7 (00000111)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	89 83       	std	Y+1, r24	; 0x01
	 * |      0 0 0 C4 C3 C2 C1 C0  ->
	 *
	 * */
	/*Channel */
//	Channel   = Channel & (0b00000111);
	Channel   = Channel & (0x07);
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	87 70       	andi	r24, 0x07	; 7
    1380:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_Reg = ADMUX_Reg| Channel ;
    1382:	a7 e2       	ldi	r26, 0x27	; 39
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 e2       	ldi	r30, 0x27	; 39
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	90 81       	ld	r25, Z
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	89 2b       	or	r24, r25
    1390:	8c 93       	st	X, r24
	 * Ch|ADMUX ->  101 0 0111
	 *
	 * */
	/*Start Conversion
	 * 1- ADSC in ADCSRA must be 1 */
	SetBit(ADCSRA_Reg,ADSC_Bit);
    1392:	a6 e2       	ldi	r26, 0x26	; 38
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e6 e2       	ldi	r30, 0x26	; 38
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 64       	ori	r24, 0x40	; 64
    139e:	8c 93       	st	X, r24
	while(GetBit(ADCSRA_Reg,ADIF_Bit)==0)
    13a0:	e6 e2       	ldi	r30, 0x26	; 38
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	82 95       	swap	r24
    13a8:	8f 70       	andi	r24, 0x0F	; 15
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	90 70       	andi	r25, 0x00	; 0
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	a9 f3       	breq	.-22     	; 0x13a0 <mADC_SignleEndedConversion+0x30>
		// Waiting
		// this loop will terminated when the ADIF = 1
	}
	// Clear ADIF By SW
		// Write Logic 1 on ADIF
	SetBit(ADCSRA_Reg,ADIF_Bit);
    13b6:	a6 e2       	ldi	r26, 0x26	; 38
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e6 e2       	ldi	r30, 0x26	; 38
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 61       	ori	r24, 0x10	; 16
    13c2:	8c 93       	st	X, r24
	return ADCData_Reg;
    13c4:	e4 e2       	ldi	r30, 0x24	; 36
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01

}
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <hSSD_Init>:
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};

void hSSD_Init(uint8_t SSD_Group) {
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
    mDIO_ChangeDirectionforGroup(SSD_Group, 0xFF); // All 8 pins as output
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	6f ef       	ldi	r22, 0xFF	; 255
    13e4:	0e 94 ac 08 	call	0x1158	; 0x1158 <mDIO_ChangeDirectionforGroup>
}
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <hSSD_DisplayNumber>:

void hSSD_DisplayNumber(uint8_t Number, uint8_t SSD_Group) {
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <hSSD_DisplayNumber+0x6>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	6a 83       	std	Y+2, r22	; 0x02
    if (Number < 10) {
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8a 30       	cpi	r24, 0x0A	; 10
    1402:	58 f4       	brcc	.+22     	; 0x141a <hSSD_DisplayNumber+0x2a>
        mDIO_WriteValueForGroup(SSD_Group, SSD_LookupTable[Number]);
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	fc 01       	movw	r30, r24
    140c:	e8 59       	subi	r30, 0x98	; 152
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	90 81       	ld	r25, Z
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	69 2f       	mov	r22, r25
    1416:	0e 94 ee 08 	call	0x11dc	; 0x11dc <mDIO_WriteValueForGroup>
    }
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <hLed_Init>:

#include "../../../Inc/MCAL/DIO/DIO.h"
#include "../../../Inc/HAL/LED/LED.h"
#include "../../../Inc/Common/Macros.h"

void hLed_Init(uint8_t LedGroup, uint8_t LedPin) {
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <hLed_Init+0x6>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_ChangeDirectionForPin(LedGroup, LedPin, DIO_Output);
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	6a 81       	ldd	r22, Y+2	; 0x02
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 23 06 	call	0xc46	; 0xc46 <mDIO_ChangeDirectionForPin>
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <hLed_On>:

void hLed_On(uint8_t LedGroup, uint8_t LedPin) {
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <hLed_On+0x6>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_WriteValueForPin(LedGroup, LedPin, DIO_Output);
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	6a 81       	ldd	r22, Y+2	; 0x02
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <hLed_Off>:

void hLed_Off(uint8_t LedGroup, uint8_t LedPin) {
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <hLed_Off+0x6>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_WriteValueForPin(LedGroup, LedPin, DIO_Input);
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	6a 81       	ldd	r22, Y+2	; 0x02
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <hLCD_Init>:
#include "../../../Inc/MCAL/DIO/DIO.h"
#include "../../../Inc/HAL/LCD/LCD.h"
#include "../../../Inc/Common/Macros.h"
#include <util/delay.h>
void hLCD_Init()
{
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	c6 54       	subi	r28, 0x46	; 70
    1498:	d0 40       	sbci	r29, 0x00	; 0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
	// Set Dirtection
	mDIO_ChangeDirectionForPin(LCD_RSGroup,LCD_RSPin,DIO_Output);
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	0e 94 23 06 	call	0xc46	; 0xc46 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(LCD_RWGroup,LCD_RWPin,DIO_Output);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 23 06 	call	0xc46	; 0xc46 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(LCD_EGroup,LCD_EPin,DIO_Output);
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 23 06 	call	0xc46	; 0xc46 <mDIO_ChangeDirectionForPin>
	//	mDIO_ChangeDirectionforGroup(LCD_DataGroup,DIO_Output); 0000 0001
	mDIO_ChangeDirectionforGroup(LCD_DataGroup,0xFF);
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	6f ef       	ldi	r22, 0xFF	; 255
    14c6:	0e 94 ac 08 	call	0x1158	; 0x1158 <mDIO_ChangeDirectionforGroup>
    14ca:	fe 01       	movw	r30, r28
    14cc:	ed 5b       	subi	r30, 0xBD	; 189
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	ac e0       	ldi	r26, 0x0C	; 12
    14d6:	b2 e4       	ldi	r27, 0x42	; 66
    14d8:	80 83       	st	Z, r24
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	a2 83       	std	Z+2, r26	; 0x02
    14de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	8e 01       	movw	r16, r28
    14e2:	01 5c       	subi	r16, 0xC1	; 193
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	fe 01       	movw	r30, r28
    14e8:	ed 5b       	subi	r30, 0xBD	; 189
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4a e7       	ldi	r20, 0x7A	; 122
    14fa:	53 e4       	ldi	r21, 0x43	; 67
    14fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	f8 01       	movw	r30, r16
    1506:	80 83       	st	Z, r24
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	a2 83       	std	Z+2, r26	; 0x02
    150c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150e:	fe 01       	movw	r30, r28
    1510:	ff 96       	adiw	r30, 0x3f	; 63
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <hLCD_Init+0xaa>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9e af       	std	Y+62, r25	; 0x3e
    1530:	8d af       	std	Y+61, r24	; 0x3d
    1532:	46 c0       	rjmp	.+140    	; 0x15c0 <hLCD_Init+0x136>
	else if (__tmp > 65535)
    1534:	fe 01       	movw	r30, r28
    1536:	ff 96       	adiw	r30, 0x3f	; 63
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	64 f5       	brge	.+88     	; 0x15a8 <hLCD_Init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	fe 01       	movw	r30, r28
    1552:	ed 5b       	subi	r30, 0xBD	; 189
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 e4       	ldi	r21, 0x41	; 65
    1566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	9e af       	std	Y+62, r25	; 0x3e
    157c:	8d af       	std	Y+61, r24	; 0x3d
    157e:	0f c0       	rjmp	.+30     	; 0x159e <hLCD_Init+0x114>
    1580:	89 e1       	ldi	r24, 0x19	; 25
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9c af       	std	Y+60, r25	; 0x3c
    1586:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1588:	8b ad       	ldd	r24, Y+59	; 0x3b
    158a:	9c ad       	ldd	r25, Y+60	; 0x3c
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <hLCD_Init+0x102>
    1590:	9c af       	std	Y+60, r25	; 0x3c
    1592:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1594:	8d ad       	ldd	r24, Y+61	; 0x3d
    1596:	9e ad       	ldd	r25, Y+62	; 0x3e
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	9e af       	std	Y+62, r25	; 0x3e
    159c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	8d ad       	ldd	r24, Y+61	; 0x3d
    15a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	69 f7       	brne	.-38     	; 0x1580 <hLCD_Init+0xf6>
    15a6:	16 c0       	rjmp	.+44     	; 0x15d4 <hLCD_Init+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a8:	fe 01       	movw	r30, r28
    15aa:	ff 96       	adiw	r30, 0x3f	; 63
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e af       	std	Y+62, r25	; 0x3e
    15be:	8d af       	std	Y+61, r24	; 0x3d
    15c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c4:	9a af       	std	Y+58, r25	; 0x3a
    15c6:	89 af       	std	Y+57, r24	; 0x39
    15c8:	89 ad       	ldd	r24, Y+57	; 0x39
    15ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <hLCD_Init+0x142>
    15d0:	9a af       	std	Y+58, r25	; 0x3a
    15d2:	89 af       	std	Y+57, r24	; 0x39

	/*Initaliaztion 8Bit Mode */
	//Delay More Than 30ms
	_delay_ms(35);
	// Function Set
	hLCD_SendCommand(0x38);
    15d4:	88 e3       	ldi	r24, 0x38	; 56
    15d6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 e8       	ldi	r26, 0x80	; 128
    15e0:	bf e3       	ldi	r27, 0x3F	; 63
    15e2:	8d ab       	std	Y+53, r24	; 0x35
    15e4:	9e ab       	std	Y+54, r25	; 0x36
    15e6:	af ab       	std	Y+55, r26	; 0x37
    15e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ea:	6d a9       	ldd	r22, Y+53	; 0x35
    15ec:	7e a9       	ldd	r23, Y+54	; 0x36
    15ee:	8f a9       	ldd	r24, Y+55	; 0x37
    15f0:	98 ad       	ldd	r25, Y+56	; 0x38
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a e7       	ldi	r20, 0x7A	; 122
    15f8:	53 e4       	ldi	r21, 0x43	; 67
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	89 ab       	std	Y+49, r24	; 0x31
    1604:	9a ab       	std	Y+50, r25	; 0x32
    1606:	ab ab       	std	Y+51, r26	; 0x33
    1608:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    160a:	69 a9       	ldd	r22, Y+49	; 0x31
    160c:	7a a9       	ldd	r23, Y+50	; 0x32
    160e:	8b a9       	ldd	r24, Y+51	; 0x33
    1610:	9c a9       	ldd	r25, Y+52	; 0x34
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    161e:	88 23       	and	r24, r24
    1620:	2c f4       	brge	.+10     	; 0x162c <hLCD_Init+0x1a2>
		__ticks = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	98 ab       	std	Y+48, r25	; 0x30
    1628:	8f a7       	std	Y+47, r24	; 0x2f
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <hLCD_Init+0x220>
	else if (__tmp > 65535)
    162c:	69 a9       	ldd	r22, Y+49	; 0x31
    162e:	7a a9       	ldd	r23, Y+50	; 0x32
    1630:	8b a9       	ldd	r24, Y+51	; 0x33
    1632:	9c a9       	ldd	r25, Y+52	; 0x34
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	4c f5       	brge	.+82     	; 0x1696 <hLCD_Init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1644:	6d a9       	ldd	r22, Y+53	; 0x35
    1646:	7e a9       	ldd	r23, Y+54	; 0x36
    1648:	8f a9       	ldd	r24, Y+55	; 0x37
    164a:	98 ad       	ldd	r25, Y+56	; 0x38
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e2       	ldi	r20, 0x20	; 32
    1652:	51 e4       	ldi	r21, 0x41	; 65
    1654:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	98 ab       	std	Y+48, r25	; 0x30
    166a:	8f a7       	std	Y+47, r24	; 0x2f
    166c:	0f c0       	rjmp	.+30     	; 0x168c <hLCD_Init+0x202>
    166e:	89 e1       	ldi	r24, 0x19	; 25
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9e a7       	std	Y+46, r25	; 0x2e
    1674:	8d a7       	std	Y+45, r24	; 0x2d
    1676:	8d a5       	ldd	r24, Y+45	; 0x2d
    1678:	9e a5       	ldd	r25, Y+46	; 0x2e
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <hLCD_Init+0x1f0>
    167e:	9e a7       	std	Y+46, r25	; 0x2e
    1680:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	8f a5       	ldd	r24, Y+47	; 0x2f
    1684:	98 a9       	ldd	r25, Y+48	; 0x30
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	98 ab       	std	Y+48, r25	; 0x30
    168a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168c:	8f a5       	ldd	r24, Y+47	; 0x2f
    168e:	98 a9       	ldd	r25, Y+48	; 0x30
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	69 f7       	brne	.-38     	; 0x166e <hLCD_Init+0x1e4>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <hLCD_Init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1696:	69 a9       	ldd	r22, Y+49	; 0x31
    1698:	7a a9       	ldd	r23, Y+50	; 0x32
    169a:	8b a9       	ldd	r24, Y+51	; 0x33
    169c:	9c a9       	ldd	r25, Y+52	; 0x34
    169e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	98 ab       	std	Y+48, r25	; 0x30
    16a8:	8f a7       	std	Y+47, r24	; 0x2f
    16aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ac:	98 a9       	ldd	r25, Y+48	; 0x30
    16ae:	9c a7       	std	Y+44, r25	; 0x2c
    16b0:	8b a7       	std	Y+43, r24	; 0x2b
    16b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <hLCD_Init+0x22c>
    16ba:	9c a7       	std	Y+44, r25	; 0x2c
    16bc:	8b a7       	std	Y+43, r24	; 0x2b
	//Delay More than 39us -> 1ms
	_delay_ms(1);
	//Display ON/OFF Control
	hLCD_SendCommand(0x0E);
    16be:	8e e0       	ldi	r24, 0x0E	; 14
    16c0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a0 e8       	ldi	r26, 0x80	; 128
    16ca:	bf e3       	ldi	r27, 0x3F	; 63
    16cc:	8f a3       	std	Y+39, r24	; 0x27
    16ce:	98 a7       	std	Y+40, r25	; 0x28
    16d0:	a9 a7       	std	Y+41, r26	; 0x29
    16d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d4:	6f a1       	ldd	r22, Y+39	; 0x27
    16d6:	78 a5       	ldd	r23, Y+40	; 0x28
    16d8:	89 a5       	ldd	r24, Y+41	; 0x29
    16da:	9a a5       	ldd	r25, Y+42	; 0x2a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4a e7       	ldi	r20, 0x7A	; 122
    16e2:	53 e4       	ldi	r21, 0x43	; 67
    16e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	8b a3       	std	Y+35, r24	; 0x23
    16ee:	9c a3       	std	Y+36, r25	; 0x24
    16f0:	ad a3       	std	Y+37, r26	; 0x25
    16f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f4:	6b a1       	ldd	r22, Y+35	; 0x23
    16f6:	7c a1       	ldd	r23, Y+36	; 0x24
    16f8:	8d a1       	ldd	r24, Y+37	; 0x25
    16fa:	9e a1       	ldd	r25, Y+38	; 0x26
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	2c f4       	brge	.+10     	; 0x1716 <hLCD_Init+0x28c>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9a a3       	std	Y+34, r25	; 0x22
    1712:	89 a3       	std	Y+33, r24	; 0x21
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <hLCD_Init+0x30a>
	else if (__tmp > 65535)
    1716:	6b a1       	ldd	r22, Y+35	; 0x23
    1718:	7c a1       	ldd	r23, Y+36	; 0x24
    171a:	8d a1       	ldd	r24, Y+37	; 0x25
    171c:	9e a1       	ldd	r25, Y+38	; 0x26
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	57 e4       	ldi	r21, 0x47	; 71
    1726:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172a:	18 16       	cp	r1, r24
    172c:	4c f5       	brge	.+82     	; 0x1780 <hLCD_Init+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172e:	6f a1       	ldd	r22, Y+39	; 0x27
    1730:	78 a5       	ldd	r23, Y+40	; 0x28
    1732:	89 a5       	ldd	r24, Y+41	; 0x29
    1734:	9a a5       	ldd	r25, Y+42	; 0x2a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9a a3       	std	Y+34, r25	; 0x22
    1754:	89 a3       	std	Y+33, r24	; 0x21
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <hLCD_Init+0x2ec>
    1758:	89 e1       	ldi	r24, 0x19	; 25
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	98 a3       	std	Y+32, r25	; 0x20
    175e:	8f 8f       	std	Y+31, r24	; 0x1f
    1760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1762:	98 a1       	ldd	r25, Y+32	; 0x20
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <hLCD_Init+0x2da>
    1768:	98 a3       	std	Y+32, r25	; 0x20
    176a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	89 a1       	ldd	r24, Y+33	; 0x21
    176e:	9a a1       	ldd	r25, Y+34	; 0x22
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9a a3       	std	Y+34, r25	; 0x22
    1774:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1776:	89 a1       	ldd	r24, Y+33	; 0x21
    1778:	9a a1       	ldd	r25, Y+34	; 0x22
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	69 f7       	brne	.-38     	; 0x1758 <hLCD_Init+0x2ce>
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <hLCD_Init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	6b a1       	ldd	r22, Y+35	; 0x23
    1782:	7c a1       	ldd	r23, Y+36	; 0x24
    1784:	8d a1       	ldd	r24, Y+37	; 0x25
    1786:	9e a1       	ldd	r25, Y+38	; 0x26
    1788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9a a3       	std	Y+34, r25	; 0x22
    1792:	89 a3       	std	Y+33, r24	; 0x21
    1794:	89 a1       	ldd	r24, Y+33	; 0x21
    1796:	9a a1       	ldd	r25, Y+34	; 0x22
    1798:	9e 8f       	std	Y+30, r25	; 0x1e
    179a:	8d 8f       	std	Y+29, r24	; 0x1d
    179c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <hLCD_Init+0x316>
    17a4:	9e 8f       	std	Y+30, r25	; 0x1e
    17a6:	8d 8f       	std	Y+29, r24	; 0x1d
	//Delay More than 39us -> 1ms
	_delay_ms(1);
	//Display Clear
	hLCD_SendCommand(0x01);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	b0 e4       	ldi	r27, 0x40	; 64
    17b6:	89 8f       	std	Y+25, r24	; 0x19
    17b8:	9a 8f       	std	Y+26, r25	; 0x1a
    17ba:	ab 8f       	std	Y+27, r26	; 0x1b
    17bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	69 8d       	ldd	r22, Y+25	; 0x19
    17c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a e7       	ldi	r20, 0x7A	; 122
    17cc:	53 e4       	ldi	r21, 0x43	; 67
    17ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8d 8b       	std	Y+21, r24	; 0x15
    17d8:	9e 8b       	std	Y+22, r25	; 0x16
    17da:	af 8b       	std	Y+23, r26	; 0x17
    17dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17de:	6d 89       	ldd	r22, Y+21	; 0x15
    17e0:	7e 89       	ldd	r23, Y+22	; 0x16
    17e2:	8f 89       	ldd	r24, Y+23	; 0x17
    17e4:	98 8d       	ldd	r25, Y+24	; 0x18
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <hLCD_Init+0x376>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <hLCD_Init+0x3f4>
	else if (__tmp > 65535)
    1800:	6d 89       	ldd	r22, Y+21	; 0x15
    1802:	7e 89       	ldd	r23, Y+22	; 0x16
    1804:	8f 89       	ldd	r24, Y+23	; 0x17
    1806:	98 8d       	ldd	r25, Y+24	; 0x18
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <hLCD_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	69 8d       	ldd	r22, Y+25	; 0x19
    181a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <hLCD_Init+0x3d6>
    1842:	89 e1       	ldi	r24, 0x19	; 25
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9a 8b       	std	Y+18, r25	; 0x12
    1848:	89 8b       	std	Y+17, r24	; 0x11
    184a:	89 89       	ldd	r24, Y+17	; 0x11
    184c:	9a 89       	ldd	r25, Y+18	; 0x12
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <hLCD_Init+0x3c4>
    1852:	9a 8b       	std	Y+18, r25	; 0x12
    1854:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	8b 89       	ldd	r24, Y+19	; 0x13
    1858:	9c 89       	ldd	r25, Y+20	; 0x14
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9c 8b       	std	Y+20, r25	; 0x14
    185e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	8b 89       	ldd	r24, Y+19	; 0x13
    1862:	9c 89       	ldd	r25, Y+20	; 0x14
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <hLCD_Init+0x3b8>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <hLCD_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6d 89       	ldd	r22, Y+21	; 0x15
    186c:	7e 89       	ldd	r23, Y+22	; 0x16
    186e:	8f 89       	ldd	r24, Y+23	; 0x17
    1870:	98 8d       	ldd	r25, Y+24	; 0x18
    1872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9c 8b       	std	Y+20, r25	; 0x14
    187c:	8b 8b       	std	Y+19, r24	; 0x13
    187e:	8b 89       	ldd	r24, Y+19	; 0x13
    1880:	9c 89       	ldd	r25, Y+20	; 0x14
    1882:	98 8b       	std	Y+16, r25	; 0x10
    1884:	8f 87       	std	Y+15, r24	; 0x0f
    1886:	8f 85       	ldd	r24, Y+15	; 0x0f
    1888:	98 89       	ldd	r25, Y+16	; 0x10
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <hLCD_Init+0x400>
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	8f 87       	std	Y+15, r24	; 0x0f
	//Delay More than 1.53ms ->2ms
	_delay_ms(2);
	//	Entry Mode Set
	hLCD_SendCommand(0x06);
    1892:	86 e0       	ldi	r24, 0x06	; 6
    1894:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e8       	ldi	r26, 0x80	; 128
    189e:	bf e3       	ldi	r27, 0x3F	; 63
    18a0:	8b 87       	std	Y+11, r24	; 0x0b
    18a2:	9c 87       	std	Y+12, r25	; 0x0c
    18a4:	ad 87       	std	Y+13, r26	; 0x0d
    18a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	53 e4       	ldi	r21, 0x43	; 67
    18b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8f 83       	std	Y+7, r24	; 0x07
    18c2:	98 87       	std	Y+8, r25	; 0x08
    18c4:	a9 87       	std	Y+9, r26	; 0x09
    18c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <hLCD_Init+0x460>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <hLCD_Init+0x4de>
	else if (__tmp > 65535)
    18ea:	6f 81       	ldd	r22, Y+7	; 0x07
    18ec:	78 85       	ldd	r23, Y+8	; 0x08
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <hLCD_Init+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6b 85       	ldd	r22, Y+11	; 0x0b
    1904:	7c 85       	ldd	r23, Y+12	; 0x0c
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	9e 85       	ldd	r25, Y+14	; 0x0e
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	0f c0       	rjmp	.+30     	; 0x194a <hLCD_Init+0x4c0>
    192c:	89 e1       	ldi	r24, 0x19	; 25
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <hLCD_Init+0x4ae>
    193c:	9c 83       	std	Y+4, r25	; 0x04
    193e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <hLCD_Init+0x4a2>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <hLCD_Init+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <hLCD_Init+0x4ea>
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);



}
    197c:	ca 5b       	subi	r28, 0xBA	; 186
    197e:	df 4f       	sbci	r29, 0xFF	; 255
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	08 95       	ret

00001994 <hLCD_SendCommand>:
void hLCD_SendCommand(uint8_t Command)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01
	// RS -> 0
	mDIO_WriteValueForPin(LCD_RSGroup,LCD_RSPin,DIO_Low);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
	// RW -> 0
	mDIO_WriteValueForPin(LCD_RWGroup,LCD_RWPin,DIO_Low);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
	// E  -> 1
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_High);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
	// UpdateCommand
	mDIO_WriteValueForGroup(LCD_DataGroup,Command);
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	69 81       	ldd	r22, Y+1	; 0x01
    19c2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <mDIO_WriteValueForGroup>
	// E  -> 0
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_Low);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
}
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <hLCD_SendChar>:

void hLCD_SendChar(uint8_t Character)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
	//	RS ->1
	mDIO_WriteValueForPin(LCD_RSGroup,LCD_RSPin,DIO_High);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
	//RW -> 0
	mDIO_WriteValueForPin(LCD_RWGroup,LCD_RWPin,DIO_Low);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
	// E -1
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_High);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	62 e0       	ldi	r22, 0x02	; 2
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
	//Updata data
	mDIO_WriteValueForGroup(LCD_DataGroup,Character);
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	69 81       	ldd	r22, Y+1	; 0x01
    1a06:	0e 94 ee 08 	call	0x11dc	; 0x11dc <mDIO_WriteValueForGroup>
	//E - 0
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_Low);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	62 e0       	ldi	r22, 0x02	; 2
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>

}
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <hLCD_SendString>:



void hLCD_SendString(uint8_t Str[])
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <hLCD_SendString+0x6>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	9b 83       	std	Y+3, r25	; 0x03
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Index = 0 ;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	if(Str!=NULL)
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	d1 f0       	breq	.+52     	; 0x1a6a <hLCD_SendString+0x4e>
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <hLCD_SendString+0x38>
	{
		while(Str[Index]!=NULLChar)
		{
			hLCD_SendChar(Str[Index]);
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	fc 01       	movw	r30, r24
    1a44:	e2 0f       	add	r30, r18
    1a46:	f3 1f       	adc	r31, r19
    1a48:	80 81       	ld	r24, Z
    1a4a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <hLCD_SendChar>
			Index++;
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	89 83       	std	Y+1, r24	; 0x01
void hLCD_SendString(uint8_t Str[])
{
	uint8_t Index = 0 ;
	if(Str!=NULL)
	{
		while(Str[Index]!=NULLChar)
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5e:	fc 01       	movw	r30, r24
    1a60:	e2 0f       	add	r30, r18
    1a62:	f3 1f       	adc	r31, r19
    1a64:	80 81       	ld	r24, Z
    1a66:	88 23       	and	r24, r24
    1a68:	39 f7       	brne	.-50     	; 0x1a38 <hLCD_SendString+0x1c>
		{
			hLCD_SendChar(Str[Index]);
			Index++;
		}
	}
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <hLCD_SendNumber>:

void hLCD_SendNumber(uint32_t Number)
{
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	60 97       	sbiw	r28, 0x10	; 16
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	6d 87       	std	Y+13, r22	; 0x0d
    1a90:	7e 87       	std	Y+14, r23	; 0x0e
    1a92:	8f 87       	std	Y+15, r24	; 0x0f
    1a94:	98 8b       	std	Y+16, r25	; 0x10
    if (Number == 0)
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	af 85       	ldd	r26, Y+15	; 0x0f
    1a9c:	b8 89       	ldd	r27, Y+16	; 0x10
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	21 f4       	brne	.+8      	; 0x1aae <hLCD_SendNumber+0x38>
    {
        hLCD_SendChar('0');
    1aa6:	80 e3       	ldi	r24, 0x30	; 48
    1aa8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <hLCD_SendChar>
    1aac:	4a c0       	rjmp	.+148    	; 0x1b42 <hLCD_SendNumber+0xcc>
        return;
    }

    char buffer[11];
    uint8_t i = 0;
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	2e c0       	rjmp	.+92     	; 0x1b0e <hLCD_SendNumber+0x98>


    while (Number > 0)
    {
        buffer[i++] = (Number % 10) + '0';
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	08 2f       	mov	r16, r24
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	af 85       	ldd	r26, Y+15	; 0x0f
    1abe:	b8 89       	ldd	r27, Y+16	; 0x10
    1ac0:	2a e0       	ldi	r18, 0x0A	; 10
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__udivmodsi4>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	20 5d       	subi	r18, 0xD0	; 208
    1ad8:	ce 01       	movw	r24, r28
    1ada:	02 96       	adiw	r24, 0x02	; 2
    1adc:	fc 01       	movw	r30, r24
    1ade:	e0 0f       	add	r30, r16
    1ae0:	f1 1f       	adc	r31, r17
    1ae2:	20 83       	st	Z, r18
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	89 83       	std	Y+1, r24	; 0x01
        Number /= 10;
    1aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aee:	af 85       	ldd	r26, Y+15	; 0x0f
    1af0:	b8 89       	ldd	r27, Y+16	; 0x10
    1af2:	2a e0       	ldi	r18, 0x0A	; 10
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__udivmodsi4>
    1b02:	da 01       	movw	r26, r20
    1b04:	c9 01       	movw	r24, r18
    1b06:	8d 87       	std	Y+13, r24	; 0x0d
    1b08:	9e 87       	std	Y+14, r25	; 0x0e
    1b0a:	af 87       	std	Y+15, r26	; 0x0f
    1b0c:	b8 8b       	std	Y+16, r27	; 0x10

    char buffer[11];
    uint8_t i = 0;


    while (Number > 0)
    1b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b12:	af 85       	ldd	r26, Y+15	; 0x0f
    1b14:	b8 89       	ldd	r27, Y+16	; 0x10
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	a1 05       	cpc	r26, r1
    1b1a:	b1 05       	cpc	r27, r1
    1b1c:	51 f6       	brne	.-108    	; 0x1ab2 <hLCD_SendNumber+0x3c>
    1b1e:	0e c0       	rjmp	.+28     	; 0x1b3c <hLCD_SendNumber+0xc6>
    }


    while (i > 0)
    {
        hLCD_SendChar(buffer[--i]);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	81 50       	subi	r24, 0x01	; 1
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	02 96       	adiw	r24, 0x02	; 2
    1b30:	fc 01       	movw	r30, r24
    1b32:	e2 0f       	add	r30, r18
    1b34:	f3 1f       	adc	r31, r19
    1b36:	80 81       	ld	r24, Z
    1b38:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <hLCD_SendChar>
        buffer[i++] = (Number % 10) + '0';
        Number /= 10;
    }


    while (i > 0)
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	88 23       	and	r24, r24
    1b40:	79 f7       	brne	.-34     	; 0x1b20 <hLCD_SendNumber+0xaa>
    {
        hLCD_SendChar(buffer[--i]);
    }
}
    1b42:	60 96       	adiw	r28, 0x10	; 16
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <hLCD_StoreSpecialChar>:

void hLCD_StoreSpecialChar(uint8_t *Pattern, uint8_t Location)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <hLCD_StoreSpecialChar+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <hLCD_StoreSpecialChar+0x8>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9b 83       	std	Y+3, r25	; 0x03
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	6c 83       	std	Y+4, r22	; 0x04
    if (Location > 7){
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	88 30       	cpi	r24, 0x08	; 8
    1b6e:	10 f5       	brcc	.+68     	; 0x1bb4 <hLCD_StoreSpecialChar+0x5c>
    	return;
    }



    hLCD_SendCommand(0x40 + (Location * 8));
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	08 96       	adiw	r24, 0x08	; 8
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>

    for (uint8_t i = 0; i < 8; i++)
    1b88:	19 82       	std	Y+1, r1	; 0x01
    1b8a:	0e c0       	rjmp	.+28     	; 0x1ba8 <hLCD_StoreSpecialChar+0x50>
    {
        hLCD_SendChar(Pattern[i]);
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	fc 01       	movw	r30, r24
    1b98:	e2 0f       	add	r30, r18
    1b9a:	f3 1f       	adc	r31, r19
    1b9c:	80 81       	ld	r24, Z
    1b9e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <hLCD_SendChar>



    hLCD_SendCommand(0x40 + (Location * 8));

    for (uint8_t i = 0; i < 8; i++)
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	8f 5f       	subi	r24, 0xFF	; 255
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	88 30       	cpi	r24, 0x08	; 8
    1bac:	78 f3       	brcs	.-34     	; 0x1b8c <hLCD_StoreSpecialChar+0x34>
    {
        hLCD_SendChar(Pattern[i]);
    }

    hLCD_SendCommand(0x80);
    1bae:	80 e8       	ldi	r24, 0x80	; 128
    1bb0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <hLCD_MoveCursor>:


void hLCD_MoveCursor(uint8_t Line ,uint8_t Digit)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	63 97       	sbiw	r28, 0x13	; 19
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	88 8b       	std	Y+16, r24	; 0x10
    1bd8:	69 8b       	std	Y+17, r22	; 0x11


	uint8_t DDRAM_Address = 0 ;
    1bda:	1f 86       	std	Y+15, r1	; 0x0f
	switch(Line)
    1bdc:	88 89       	ldd	r24, Y+16	; 0x10
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3b 8b       	std	Y+19, r19	; 0x13
    1be4:	2a 8b       	std	Y+18, r18	; 0x12
    1be6:	8a 89       	ldd	r24, Y+18	; 0x12
    1be8:	9b 89       	ldd	r25, Y+19	; 0x13
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	31 f0       	breq	.+12     	; 0x1bfc <hLCD_MoveCursor+0x3a>
    1bf0:	2a 89       	ldd	r18, Y+18	; 0x12
    1bf2:	3b 89       	ldd	r19, Y+19	; 0x13
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <hLCD_MoveCursor+0x40>
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <hLCD_MoveCursor+0x46>
	{
	case 1 :  DDRAM_Address = 0x00 + Digit ;break;
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	8f 87       	std	Y+15, r24	; 0x0f
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <hLCD_MoveCursor+0x46>
	case 2 :  DDRAM_Address = 0x40 + Digit ;break;
    1c02:	89 89       	ldd	r24, Y+17	; 0x11
    1c04:	80 5c       	subi	r24, 0xC0	; 192
    1c06:	8f 87       	std	Y+15, r24	; 0x0f
	default:
			break;
	}


	hLCD_SendCommand(128+DDRAM_Address);
    1c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0a:	80 58       	subi	r24, 0x80	; 128
    1c0c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <hLCD_SendCommand>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	53 e4       	ldi	r21, 0x43	; 67
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 83       	std	Y+7, r24	; 0x07
    1c3a:	98 87       	std	Y+8, r25	; 0x08
    1c3c:	a9 87       	std	Y+9, r26	; 0x09
    1c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <hLCD_MoveCursor+0xa0>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <hLCD_MoveCursor+0x11e>
	else if (__tmp > 65535)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <hLCD_MoveCursor+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <hLCD_MoveCursor+0x100>
    1ca4:	89 e1       	ldi	r24, 0x19	; 25
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <hLCD_MoveCursor+0xee>
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <hLCD_MoveCursor+0xe2>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <hLCD_MoveCursor+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <hLCD_MoveCursor+0x12a>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cf4:	63 96       	adiw	r28, 0x13	; 19
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <hButton_Init>:

#include "../../../Inc/MCAL/DIO/DIO.h"
#include "../../../Inc/HAL/BUTTON/BUTTON.h"
#include "../../../Inc/Common/Macros.h"

void hButton_Init(uint8_t ButtonGroup, uint8_t ButtonPin) {
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <hButton_Init+0x6>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02
    mDIO_ChangeDirectionForPin(ButtonGroup, ButtonPin, DIO_Input);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	6a 81       	ldd	r22, Y+2	; 0x02
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	0e 94 23 06 	call	0xc46	; 0xc46 <mDIO_ChangeDirectionForPin>
    mDIO_WriteValueForPin(ButtonGroup, ButtonPin, DIO_Output); // Enable internal pull-up
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	6a 81       	ldd	r22, Y+2	; 0x02
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 29 07 	call	0xe52	; 0xe52 <mDIO_WriteValueForPin>
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <hButton_IsPressed>:

uint8_t hButton_IsPressed(uint8_t ButtonGroup, uint8_t ButtonPin) {
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <hButton_IsPressed+0x6>
    1d38:	0f 92       	push	r0
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	6a 83       	std	Y+2, r22	; 0x02
    return (mDIO_ReadValueFromPin(ButtonGroup, ButtonPin) == 0); // Active Low
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	6a 81       	ldd	r22, Y+2	; 0x02
    1d46:	0e 94 2f 08 	call	0x105e	; 0x105e <mDIO_ReadValueFromPin>
    1d4a:	1b 82       	std	Y+3, r1	; 0x03
    1d4c:	88 23       	and	r24, r24
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <hButton_IsPressed+0x22>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <main>:
 *
 *  Created on: ٠٦‏/٠٨‏/٢٠٢٥
 *      Author: DELL
 */

int main(){
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
	return 0;
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <__udivmodsi4>:
    1d74:	a1 e2       	ldi	r26, 0x21	; 33
    1d76:	1a 2e       	mov	r1, r26
    1d78:	aa 1b       	sub	r26, r26
    1d7a:	bb 1b       	sub	r27, r27
    1d7c:	fd 01       	movw	r30, r26
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <__udivmodsi4_ep>

00001d80 <__udivmodsi4_loop>:
    1d80:	aa 1f       	adc	r26, r26
    1d82:	bb 1f       	adc	r27, r27
    1d84:	ee 1f       	adc	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	a2 17       	cp	r26, r18
    1d8a:	b3 07       	cpc	r27, r19
    1d8c:	e4 07       	cpc	r30, r20
    1d8e:	f5 07       	cpc	r31, r21
    1d90:	20 f0       	brcs	.+8      	; 0x1d9a <__udivmodsi4_ep>
    1d92:	a2 1b       	sub	r26, r18
    1d94:	b3 0b       	sbc	r27, r19
    1d96:	e4 0b       	sbc	r30, r20
    1d98:	f5 0b       	sbc	r31, r21

00001d9a <__udivmodsi4_ep>:
    1d9a:	66 1f       	adc	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	1a 94       	dec	r1
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <__udivmodsi4_loop>
    1da6:	60 95       	com	r22
    1da8:	70 95       	com	r23
    1daa:	80 95       	com	r24
    1dac:	90 95       	com	r25
    1dae:	9b 01       	movw	r18, r22
    1db0:	ac 01       	movw	r20, r24
    1db2:	bd 01       	movw	r22, r26
    1db4:	cf 01       	movw	r24, r30
    1db6:	08 95       	ret

00001db8 <__prologue_saves__>:
    1db8:	2f 92       	push	r2
    1dba:	3f 92       	push	r3
    1dbc:	4f 92       	push	r4
    1dbe:	5f 92       	push	r5
    1dc0:	6f 92       	push	r6
    1dc2:	7f 92       	push	r7
    1dc4:	8f 92       	push	r8
    1dc6:	9f 92       	push	r9
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	ca 1b       	sub	r28, r26
    1de2:	db 0b       	sbc	r29, r27
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	09 94       	ijmp

00001df0 <__epilogue_restores__>:
    1df0:	2a 88       	ldd	r2, Y+18	; 0x12
    1df2:	39 88       	ldd	r3, Y+17	; 0x11
    1df4:	48 88       	ldd	r4, Y+16	; 0x10
    1df6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1df8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e02:	b9 84       	ldd	r11, Y+9	; 0x09
    1e04:	c8 84       	ldd	r12, Y+8	; 0x08
    1e06:	df 80       	ldd	r13, Y+7	; 0x07
    1e08:	ee 80       	ldd	r14, Y+6	; 0x06
    1e0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e10:	aa 81       	ldd	r26, Y+2	; 0x02
    1e12:	b9 81       	ldd	r27, Y+1	; 0x01
    1e14:	ce 0f       	add	r28, r30
    1e16:	d1 1d       	adc	r29, r1
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	ed 01       	movw	r28, r26
    1e24:	08 95       	ret

00001e26 <_exit>:
    1e26:	f8 94       	cli

00001e28 <__stop_program>:
    1e28:	ff cf       	rjmp	.-2      	; 0x1e28 <__stop_program>
